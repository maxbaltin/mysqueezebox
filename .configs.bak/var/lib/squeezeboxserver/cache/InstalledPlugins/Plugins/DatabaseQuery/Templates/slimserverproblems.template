<?xml version="1.0" encoding="utf-8"?>
<databasequery>
	<dataquery>
		<name>[% queryname %]</name>
		<querytree>
			<queryid>missingcontributors</queryid>
			<query>
				select distinct 'Missing rows in contributor_album table' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from contributor_track,tracks
				where
					tracks.id=contributor_track.track and
					not exists(select * from contributor_album where contributor=contributor_track.contributor and
							role=contributor_track.role and album=tracks.album)
			</query>
		</querytree>
		<querytree>
			<queryid>invalidmusicbrainztracks</queryid>
			<query>
				select distinct 'Invalid musicbrainz song tags' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from tracks
				where
					musicbrainz_id is not null and
					musicbrainz_id not like '%-%-%-%-%'
			</query>
			<querytree>
				<queryid>track</queryid>
				<query>
					select tracks.tracknum,tracks.title,albums.title as album,tracks.musicbrainz_id,tracks.url from tracks
					left join albums on
						tracks.album=albums.id
					where
						tracks.musicbrainz_id is not null and
						tracks.musicbrainz_id not like '%-%-%-%-%'
					order by albums.titlesort,tracks.disc,tracks.tracknum
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>invalidmusicbrainzalbums</queryid>
			<query>
				select distinct 'Invalid musicbrainz album tags' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from albums
				where
					musicbrainz_id is not null and
					musicbrainz_id not like '%-%-%-%-%'
			</query>
			<querytree>
				<queryid>album</queryid>
				<query>
					select albums.id,albums.title,albums.musicbrainz_id from albums
					where
						musicbrainz_id is not null and
						musicbrainz_id not like '%-%-%-%-%'
					order by albums.titlesort
				</query>
				<querytree>
					<queryid>track</queryid>
					<query>
						select tracks.tracknum,tracks.title,tracks.musicbrainz_id,tracks.url from tracks,albums
						where
							tracks.album={album}
						order by tracks.disc,tracks.tracknum
					</query>
				</querytree>
			</querytree>
		</querytree>
		<querytree>
			<queryid>invalidmusicbrainzartists</queryid>
			<query>
				select distinct 'Invalid musicbrainz artist tags' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from contributors
				where
					musicbrainz_id is not null and
					musicbrainz_id not like '%-%-%-%-%'
			</query>
			<querytree>
				<queryid>artist</queryid>
				<query>
					select contributors.id,contributors.name,contributors.musicbrainz_id from contributors
					where
						musicbrainz_id is not null and
						musicbrainz_id not like '%-%-%-%-%'
					order by contributors.namesort
				</query>
				<querytree>
					<queryid>track</queryid>
					<query>
					select tracks.tracknum,tracks.title,tracks.musicbrainz_id,tracks.url from tracks,contributor_track
						where
							tracks.id=contributor_track.track and
							contributor_track.contributor={artist}
						order by tracks.disc,tracks.tracknum
					</query>
				</querytree>
			</querytree>
		</querytree>
		<querytree>
			<queryid>duplicatemusicbrainztracks</queryid>
			<query>
				select distinct 'Duplicate musicbrainz song tags' as 'Problem type',if(sum(cnt)>0,'Yes','No') as 'Possible problem', ifnull(sum(cnt),0) as 'Number of' from 
					(select count(*) as cnt from tracks
						where
							musicbrainz_id is not null
						group by musicbrainz_id
						having count(*)>1) result
			</query>
			<querytree>
				<queryid>track</queryid>
				<query>
					select tracks.tracknum,tracks.title,albums.title,tracks.musicbrainz_id,tracks.url from tracks
					left join albums on
						albums.id=tracks.id
					where
						tracks.musicbrainz_id is not null and
						exists (select t.url from tracks t where t.musicbrainz_id=tracks.musicbrainz_id and t.url!=tracks.url)
					order by albums.titlesort,tracks.disc,tracks.tracknum
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>duplicatemusicbrainzalbums</queryid>
			<query>
				select distinct 'Duplicate musicbrainz album tags' as 'Problem type',if(sum(cnt)>0,'Yes','No') as 'Possible problem', ifnull(sum(cnt),0) as 'Number of' from 
					(select count(*) as cnt from albums
						where
							musicbrainz_id is not null
						group by musicbrainz_id
						having count(*)>1) result
			</query>
			<querytree>
				<queryid>album</queryid>
				<query>
					select albums.id,albums.title,albums.musicbrainz_id from albums,
						(select musicbrainz_id,count(*) as cnt from albums
							where
								musicbrainz_id is not null
							group by musicbrainz_id
							having count(*)>1) duplicates
					where
						albums.musicbrainz_id=duplicates.musicbrainz_id
					order by albums.titlesort
				</query>
				<querytree>
					<queryid>track</queryid>
					<query>
						select tracks.tracknum,tracks.title,tracks.musicbrainz_id,tracks.url from tracks,albums
						where
							tracks.album={album}
						order by tracks.disc,tracks.tracknum
					</query>
				</querytree>
			</querytree>
		</querytree>
		<querytree>
			<queryid>duplicatemusicbrainzartists</queryid>
			<query>
				select distinct 'Duplicate musicbrainz artist tags' as 'Problem type',if(sum(cnt)>0,'Yes','No') as 'Possible problem', ifnull(sum(cnt),0) as 'Number of' from 
					(select count(*) as cnt from contributors
						where
							musicbrainz_id is not null
						group by musicbrainz_id
						having count(*)>1) result
			</query>
			<querytree>
				<queryid>artist</queryid>
				<query>
					select contributors.id,contributors.name,contributors.musicbrainz_id from contributors,
						(select musicbrainz_id,count(*) as cnt from contributors
							where
								musicbrainz_id is not null
							group by musicbrainz_id
							having count(*)>1) duplicates
					where
						contributors.musicbrainz_id=duplicates.musicbrainz_id
					order by contributors.namesort
				</query>
				<querytree>
					<queryid>track</queryid>
					<query>
					select tracks.tracknum,tracks.title,tracks.musicbrainz_id,tracks.url from tracks,contributor_track
						where
							tracks.id=contributor_track.track and
							contributor_track.contributor={artist}
						order by tracks.disc,tracks.tracknum
					</query>
				</querytree>
			</querytree>
		</querytree>
		<querytree>
			<queryid>artistswithoutsongs</queryid>
			<query>
				select distinct 'Artists without any songs' as 'Problem type',if(sum(cnt)>1,'Yes','No') as 'Possible problem', sum(cnt) as 'Number of' from 
					(select count(distinct contributors.id) as cnt from contributors
						left join contributor_track on
							contributor_track.contributor=contributors.id
						left join tracks on 
							contributor_track.track=tracks.id
						where
							tracks.id is null) result
			</query>
			<querytree>
				<queryid>artist</queryid>
				<query>
					select contributors.id,contributors.name from contributors
						left join contributor_track on
							contributor_track.contributor=contributors.id
						left join tracks on 
							contributor_track.track=tracks.id
						where
							tracks.id is null
					group by contributors.id
					order by contributors.namesort
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>albumswithoutsongs</queryid>
			<query>
				select distinct 'Albums without any songs' as 'Problem type',if(sum(cnt)>0,'Yes','No') as 'Possible problem', sum(cnt) as 'Number of' from 
					(select count(distinct albums.id) as cnt from albums
						left join tracks on 
							albums.id=tracks.album
						where
							tracks.id is null) result
			</query>
			<querytree>
				<queryid>album</queryid>
				<query>
					select albums.id,albums.title from albums
						left join tracks on 
							albums.id=tracks.album
						where
							tracks.id is null
					group by albums.id
					order by albums.titlesort
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>genreswithoutsongs</queryid>
			<query>
				select distinct 'Genres without any songs' as 'Problem type',if(sum(cnt)>0,'Yes','No') as 'Possible problem', sum(cnt) as 'Number of' from 
					(select count(distinct genres.id) as cnt from genres
						left join genre_track on
							genre_track.genre=genres.id
						left join tracks on 
							genre_track.track=tracks.id
						where
							tracks.id is null) result
			</query>
			<querytree>
				<queryid>genre</queryid>
				<query>
					select genres.id,genres.name from genres
						left join genre_track on
							genre_track.genre=genres.id
						left join tracks on 
							genre_track.track=tracks.id
						where
							tracks.id is null
					group by genres.id
					order by genres.namesort
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>yearswithoutsongs</queryid>
			<query>
				select distinct 'Years without any songs' as 'Problem type',if(sum(cnt)>0,'Yes','No') as 'Possible problem', sum(cnt) as 'Number of' from 
					(select count(distinct years.id) as cnt from years
						left join tracks on 
							years.id=tracks.year
						where
							tracks.id is null) result
			</query>
			<querytree>
				<queryid>year</queryid>
				<query>
					select if(years.id=0,'Unknown',years.id) as year from years
						left join tracks on 
							years.id=tracks.year
						where
							tracks.id is null
					group by years.id desc
				</query>
			</querytree>
		</querytree>
		[% IF MySQL %]
		<querytree>
			<query>
				select distinct 'Unsupported old MySQL version' as 'Problem type',if(substring_index(version(),'.',1)&lt;5,'Yes','No') as 'Possible problem', version() as 'Number of'
			</query>
		</querytree>
		[% END %]
	</dataquery>
</databasequery>

