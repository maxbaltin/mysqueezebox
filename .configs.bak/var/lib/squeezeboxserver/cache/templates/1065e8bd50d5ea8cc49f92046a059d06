#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => '/usr/share/squeezeboxserver/HTML/EN/update_software.html',
        'modtime' => '1518618963',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 1 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    
    # CAPTURE
    $stash->set('pagetitle', do {
        my $output = '';
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'SETUP_CHECKVERSION';
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
    $output .=  "\n";
#line 4 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    
    # CAPTURE
    $stash->set('pwd_list', do {
        my $output = '';
    $output .=  "\n	<a href=\"updateinfo.html?player=";
#line 3 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    $output .=  $stash->get('playerURI');
    $output .=  "\">";
#line 3 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    $output .=  $stash->get('pagetitle');
    $output .=  "</a>\n";
        $output;
    });
    
    $output .=  "\n";
#line 120 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    
    # CAPTURE
    $stash->set('extJsScripts', do {
        my $output = '';
    $output .=  "\n	<script type=\"text/javascript\">\n		Ext.onReady(function(){\n			Ext.ns('Ext.ux');\n\n			Ext.ux.JSONP = (function(){\n				var _queue = [],\n					_current = null,\n					_nextRequest = function() {\n						_current = null;\n						if(_queue.length) {\n							_current = _queue.shift();\n							_current.script.src = _current.url + '?' + _current.params;\n							document.getElementsByTagName('head')[0].appendChild(_current.script);\n						}\n					};\n\n				return {\n					request: function(url, o) {\n						if(!url) {\n							return;\n						}\n						var me = this;\n\n						o.params = o.params || {};\n						if(o.callbackKey) {\n							o.params[o.callbackKey] = 'Ext.ux.JSONP.callback';\n						}\n						var params = Ext.urlEncode(o.params);\n\n						var script = document.createElement('script');\n						script.type = 'text/javascript';\n\n						if(o.isRawJSON) {\n							if(Ext.isIE) {\n								Ext.fly(script).on('readystatechange', function() {\n									if(script.readyState == 'complete') {\n										var data = script.innerHTML;\n										if(data.length) {\n											me.callback(Ext.decode(data));\n										}\n									}\n								});\n							}\n							else {\n								Ext.fly(script).on('load', function() {\n									var data = script.innerHTML;\n									if(data.length) {\n										me.callback(Ext.decode(data));\n									}\n								});\n							}\n						}\n\n						_queue.push({\n							url: url,\n							script: script,\n							callback: o.callback || function(){},\n							scope: o.scope || window,\n							params: params || null\n						});\n\n						if(!_current) {\n							_nextRequest();\n						}\n					},\n\n					callback: function(json) {\n						_current.callback.apply(_current.scope, [json]);\n						Ext.fly(_current.script).removeAllListeners();\n						document.getElementsByTagName('head')[0].removeChild(_current.script);\n						_nextRequest();\n					}\n				}\n			})();\n\n			Ext.ux.JSONP.request(\"https://api.github.com/repos/Logitech/slimserver/commits\", {\n				params: {\n					per_page: 5,\n					// TODO: make this dynamic\n					sha: 'public/7.9'\n				},\n				callbackKey: \"callback\",\n				callback: function(c) {\n					var el = Ext.get('changelogWrapper');\n					\n					if (!el)\n						return;\n					\n					var xt = new Ext.XTemplate(\n							'<tpl if=\"this.previousDate != date\">',\n								'<dt>{[this.previousDate = values.date]}</dt>',\n							'</tpl>',\n							'<dd>&bull; <a href=\"{url}\" target=\"_blank\">{msg}</a></dd>',\n							{\n								previousDate: ''\n							}\n					);\n					xt.compile();\n\n					Ext.each(c.data, function(item, index, all){\n						var dt = Date.parseDate(item.commit.committer.date, \"c\");\n						xt.append('changelog', {\n							msg: item.commit.message,\n							author: item.committer.login,\n							date: dt.format(\"Y-m-d\"),\n							url: item.html_url\n						});\n					});\n					\n					el.setDisplayed('block');\n				}\n			});\n	});\n	</script>\n";
        $output;
    });
    
    $output .=  "\n";
#line 121 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    $output .=  $context->process('pageheader.html');
    $output .=  "\n	<div class=\"helpsection\"> \n	\n	";
#line 138 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    if ($stash->get('newVersion')) {
    $output .=  "\n		<h4>";
#line 125 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'CONTROLPANEL_UPDATE_AVAILABLE';
        
        &$_tt_filter($output);
    };
    
    $output .=  "</h4>\n	\n		<dt>";
#line 127 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    $output .=  $stash->get('newVersion');
    $output .=  "</dt>\n	\n		<div id=\"changelogWrapper\" style=\"display:none; margin-top: 15px;\" class=\"helpsection\">\n			<!-- TODO: make this URL dynamic -->\n			<h4>";
#line 131 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string', [ 'https://github.com/Logitech/slimserver/commits/public/7.9' ])
                  || $context->throw($context->error);
    
    $output .=  'UPDATES_LATEST_CHANGES';
        
        &$_tt_filter($output);
    };
    
    $output .=  "</h4>\n			<dl id=\"changelog\"></dl>\n		</div>\n		\n		<dt><a href=\"https://github.com/Logitech/slimserver/commits/public/7.9\" target=\"_blank\">";
#line 135 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'MORE';
        
        &$_tt_filter($output);
    };
    
    $output .=  "</a></dt>\n	";
    }
    else {
    $output .=  "\n		<h4>";
#line 137 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'CONTROLPANEL_NO_UPDATE_AVAILABLE';
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    $output .=  "</h4>\n	";
    }
    
    $output .=  "\n	\n	<div>&nbsp;</div>\n	\n	";
#line 150 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    if ($stash->get('newPlugins') && $stash->get(['newPlugins', 0, 'keys', 0, 'count', 0])) {
    $output .=  "\n		<h4>";
#line 143 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'PLUGINS_UPDATES_AVAILABLE';
        
        &$_tt_filter($output);
    };
    
    $output .=  "</h4>\n		<dl>\n			";
#line 148 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('newPlugins');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'plugin'} = $_tt_value;
    $output .=  "\n			<dt>";
#line 146 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    $output .=  $stash->get(['plugin', 0, 'title', 0])  . ' ('  . $stash->get(['plugin', 0, 'version', 0])  . ')';
    $output .=  "</dt>";
#line 147 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    if ($stash->get(['plugin', 0, 'changes', 0])) {
    $output .=  "<dd>";
#line 147 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    $output .=  $stash->get(['plugin', 0, 'changes', 0]);
    $output .=  "</dd>";
    }
    
    $output .=  "\n			";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n		</dl>\n	";
    }
    
    $output .=  "\n	\n	</div>\n";
#line 153 "/usr/share/squeezeboxserver/HTML/EN/update_software.html"
    $output .=  $context->process('pagefooter.html');
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
