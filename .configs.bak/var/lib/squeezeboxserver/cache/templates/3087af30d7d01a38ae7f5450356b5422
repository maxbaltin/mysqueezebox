#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => '/usr/share/squeezeboxserver/HTML/EN/html/docs/slimproto.html',
        'modtime' => '1518618963',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 1 "/usr/share/squeezeboxserver/HTML/EN/html/docs/slimproto.html"
    $stash->set('pagetitle', 'The SlimProto TCP Protocol:');
    $output .=  "\n";
#line 2 "/usr/share/squeezeboxserver/HTML/EN/html/docs/slimproto.html"
    $stash->set('techinfo', '1');
    $output .=  "\n";
#line 3 "/usr/share/squeezeboxserver/HTML/EN/html/docs/slimproto.html"
    $stash->set('lefttoright', '1');
    $output .=  "\n";
#line 4 "/usr/share/squeezeboxserver/HTML/EN/html/docs/slimproto.html"
    $output .=  $context->process('helpheader.html');
    $output .=  "\n\n<h4>SlimProto  Protocol</h4>\n\n<p>The SlimProto  protocol is the new protocol developed for the Squeezebox and Transporter and replaces the SLIMP3 one. \nIt is designed to allow the players to communicate effectively over WANs as well as LANs.</p>\n\n<p>This document describes SlimProto for firmware versions 20 and above.\n\n<p>The server listens on TCP port 3483 for connections by players. To register a player with the server, they exchange \"helo\"s and than any of the commands below are valid.</p>\n<p>The client also listens on UDP port 3483 for SlimProto commands from the server it has already established a TCP connection with.</p>\n\n<p>The byte order is critical for several of the fields. The best way to check this out is to look at the server source code.</p>\n\n<h4>Client -> Server Communications</h4>\n\n<p>A command to the server consists of three parts:</p>\n\n<blockquote>\n<p>1. The 1st 4 bytes specify the operation. The following operations are supported:<p>\n\n<ul>\n<li>HELO</li>\n<li>IR  (note the two spaces after IR)</li>\n<li>RESP</li>\n<li>STAT</li>\n<li>BYE!</li>\n</ul>\n\n<p>2. The 2nd part (of four bytes) is simply the length of the data packet (in Network order).</p>\n\n<p>3. The 3rd part is the data itself.</p>\n</blockquote>\n\n<p>Each of the operations above are detailed below:</p>\n\n<p><b>HELO</b></p>\n\n<blockquote>\n\n<p>This alerts the server to a clients presence and is the first thing normally transmitted by a client powering up.</p>\n\n<p><b>Data Length:</b> Fixed at 10 bytes.</p>\n\n<p><b>Format:</b></p>\n\n<table border=1 cellpadding=2>\n<tr><td>DeviceID</td><td>1 byte</td><td>The Device ID of the player. '2' is Squeezebox</td></tr>\n<tr><td>Revision</td><td>1 byte</td><td>A number specifying the firmware revision</td></tr>\n<tr><td>MAC 0-5</td><td>6 bytes</td><td>The player's MAC address</td></tr>\n<tr><td>WLanChannelList</td><td>2 bytes</td><td>A list of 802.11 channels that are enabled on a given device as a \nbitfield.  0x07ff means that channels 0 through 11 are enabled, which \nmeans it's configured for the US.</td></tr>\n</table>\n</p>\n\n</blockquote>\n\n<p><b>\"IR  \"</b> (Note the two spaces to make it up to 4 characters.)</p>\n<blockquote>\n\n<p>One of these packets is recieved for each IR code recieved by the player.</p>\n\n<p><b>Data Length:</b> Fixed at 10 bytes.</p>\n\n<p><b>Format:</b></p>\n\n<table border=1 cellpadding=2>\n<tr><td>Time</td><td>4 bytes</td><td>Time since player startup in ticks (\@1Khz)</td></tr>\n<tr><td>Format</td><td>1 byte</td><td>Code Format (ignored by the server for now - Code represents type of IR code - NEC, JVC or Sony)</td></tr>\n<tr><td>NoBits</td><td>1 byte</td><td>Length of IR Code (ignored by the server for now - 16 bits for JVC, 32 bits for NEC?)</td></tr>\n<tr><td>IRCode</td><td>4 bytes</td><td>the IR Code itself (upto 32 bits)</td></tr>\n</table>\n\n</blockquote>\n\n<p><b>RESP</b></p>\n<blockquote>\n<p>Response from the player - currently unused. The client is reporting back the status of the data server response.</p>\n\n</blockquote>\n<p><b>STAT</b></p>\n<blockquote>\n\n<p>These are sent by the player in response to commands and periodically when there \nare no commands as a sort of keep-alive. They inform the server of the status of various player internals.</p>\n\n<p><b>Format:</b></p>\n\n<table border=1 cellpadding=2>\n<tr><td>u32</td><td>Event Code (a 4 byte string)</td></tr>\n<tr><td>u8</td><td>Number of consecutive CRLF recieved while parsing headers</td></tr>\n<tr><td>u8</td><td>MAS Initalized - 'm' or 'p'</td></tr>\n<tr><td>u8</td><td>MAS Mode - serdes mode?</td></tr>\n<tr><td>u32</td><td>buffer size - size, in bytes, of the player's buffer memory</td></tr>\n<tr><td>u32</td><td>fullness - number of bytes of audio data in the player's buffer memory</td></tr>\n<tr><td>u64</td><td>Bytes Recieved</td></tr>\n<tr><td>u16</td><td>Wireless Signal Strength (0-100 - Larger values mean hardwired)</td></tr>\n<tr><td>u32</td><td>jiffies - a timestamp from the player (\@1Khz)</td></tr>\n</table>\n\n<p>The following event codes are (currently) used:</p>\n\n<table border=1 dellpadding=2>\n<tr><td>STMu</td><td>data underrun</td></tr>\n<tr><td>STMe</td><td>connection established</td></tr>\n<tr><td>STMh</td><td>received end of headers from data server</td></tr>\n<tr><td>STMa</td><td>autostart of playback occured</td></tr>\n<tr><td>STMf</td><td>connection closed</td></tr>\n<tr><td>STMp</td><td>playback paused</td></tr>\n<tr><td>STMr</td><td>playback unpaused</td></tr>\n</table>\n\n<p>The event code is a method of triggering events in the server. The only currently used event is \"STMu\" which occurs on buffer underrun. This causes the server to switch to the next track.</p>\n\n<p>The Bytes Received field is how many data bytes the player has recieved (since it started playing?). This and the read/write pointers are used to update the elapsed time count.</p>\n\n</blockquote>\n<p><b>BYE!</b></p>\n<blockquote>\n\n<p>The player is disconnecting.</p>\n\n<p>If the first data byte to this command is 0x01 then the player is going out for an upgrade...</p>\n</blockquote>\n\n<h4>Server -> Client Communication</h4>\n\n<p>Data from the server to the player consists of 2 bytes of length data (in network order), a 4 byte command header, then the command data itself.</p>\n\n<p><b>Command: \"strm\"</b></p>\n\n<blockquote>\n\n<p> This takes 16 bytes data of the form: </p>\n\n<table border=1 cellpadding=2>\n<tr><td>\$command</td><td>1 byte</td><td>'s' start, 'p' pause, 'u' unpause, 'q' stop</td></tr>\n<tr><td>\$autostart</td><td>1 byte</td><td>(buffer threshold to start playing at) '0' off, '1' 25%, '2' 50%, '3' 75%, '4' 100%</td></tr>\n<tr><td>\$formatbyte</td><td>1 byte</td><td>'p' for pcm data, 'm' for mp3 </td></tr>\n<tr><td>\$pcmsamplesize</td><td>1 byte</td><td>'0' = 8, '1' = 16, '2' = 20, '3' = 32 usually '1' ('?' for mp3)</td></tr>\n<tr><td>\$pcmsamplerate</td><td>1 byte</td><td>'0'=11kHz, '1'=22kHz, '2'=32kHz, '3'=44.1kHz, '4'=48kHz usually '3' ('?' for mp3)</td></tr>\n<tr><td>\$pcmchannels</td><td>1 byte</td><td>'1'=mono, '2'=stereo usually '2' ('?' for mp3) </td></tr>\n<tr><td>\$pcmendian</td><td>1 byte</td><td>'0' = big, '1' = little ('1' for wav, '0' for aif, '?' for mp3)</td></tr>\n<tr><td>\$prebuffer_slience</td><td>1 byte</td><td>usually 5 (mpeg prebuffer x frames of silence)</td></tr>\n<tr><td>\$spdif_enable</td><td>1 byte</td><td>'0'=auto, '1'=on, '2'=off usually 0</td></tr>\n<tr><td>&nbsp;</td><td>1 byte</td><td>reserved</td></tr>\n<tr><td>\$server_port</td><td>2 bytes</td><td>Server Port to use (9000 is the default)</td></tr>\n<tr><td>\$server_ip</td><td>4 bytes</td><td>0 means use IP of control server</td></tr>\n</table>\n\n<p>This is followed by an HTTP header itself. This is used to obtain the stream data eg:</p>\n\n<p>GET /stream.mp3?player=\$client-id HTTP/1.0\n<br>(Authorization: Basic \$password)\n<br>(blank line)\n</p>\n\n<p>The Auth line is only sent if authorization is in use. \$client-id is the usually the MAC address of the player and \$password is a password generated by the server.</p>\n\n</blockquote>\n\n<p><b>Command: \"i2cc\"</b></p>\n\n<blockquote>\n\n<p>Sends an i2c command to the client.</p>\n\n<p>The data is the i2c command to send in the same format as for the SLIMP3 protocol.</p>\n\n<p>This is used to control the setup of the mas chip. Volume commands are embedded in this.</p>\n\n</blockquote>\n\n<p><b>Command: \"vfdc\"</b></p>\n\n<blockquote>\n\n<p>Sends VFD data to the client.</p>\n\n<p>The data is the vfd data to send in the same format as for the SLIMP3 protocol.</p>\n\n</blockquote>\n\n<p><b>Command: \"vers\"</b></p>\n\n<blockquote>\n\n<p>Sends server version string to the client.</p>\n\n<p>The data is the human readable version information for the server.</p>\n\n</blockquote>\n\n";
#line 198 "/usr/share/squeezeboxserver/HTML/EN/html/docs/slimproto.html"
    $output .=  $context->process('helpfooter.html');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
