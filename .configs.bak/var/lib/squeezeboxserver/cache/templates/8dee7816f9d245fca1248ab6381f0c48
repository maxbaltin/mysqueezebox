#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1518618963',
        'name' => '/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/EN/plugins/DnDPlay/settings.html',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 1 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/EN/plugins/DnDPlay/settings.html"
    $output .=  $context->process('settings/header.html');
    $output .=  "\n\n	";
#line 6 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/EN/plugins/DnDPlay/settings.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n		";
#line 4 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/EN/plugins/DnDPlay/settings.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('string')
                  || $context->throw($context->error);
    
    $output .=  'PLUGIN_DNDPLAY_MAX_FILESIZE_DESC';
        
        &$_tt_filter($output);
    };
    
    $output .=  "<br/><br/>\n		<input type=\"text\" class=\"stdedit sliderInput_10_1000\" name=\"pref_maxfilesize\" id=\"idletime\" value=\"";
#line 5 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/EN/plugins/DnDPlay/settings.html"
    $output .=  $stash->get(['prefs', 0, 'pref_maxfilesize', 0]);
    $output .=  "\" size=\"10\">\n	";
        $context->include('setting', { 'title' => 'PLUGIN_DNDPLAY_MAX_FILESIZE', 'desc' => '', 'content', $output }); 
    };
    
    $output .=  "\n\n";
#line 8 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/EN/plugins/DnDPlay/settings.html"
    $output .=  $context->process('settings/footer.html');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
