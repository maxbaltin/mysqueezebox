#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1249312473',
        'name' => 'html/settings.js',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 15 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('null')
                  || $context->throw($context->error);
    
    $output .=  "\n	";
    
    $output .=  "\n";
        
        &$_tt_filter($output);
    };
    
    $output .=  "\nfunction chooseSettings(value,option)\n{\n	var url;\n\n	switch(option)\n	{\n		";
#line 27 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
    if ($stash->get('needsClient')) {
    $output .=  "			";
#line 24 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
    $output .=  $context->process('addSetupCaseLinks', { 'setuplinks' => $stash->get('playersetup') });
    }
    else {
    $output .=  "			";
#line 26 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
    $output .=  $context->process('addSetupCaseLinks', { 'setuplinks' => $stash->get(['additionalLinks', 0, 'setup', 0]) });
    }
    
    $output .=  "\n\n		case \"HOME\":\n			url = \"";
#line 30 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
    $output .=  $stash->get('webroot');
    $output .=  "home.html?\"\n		break\n	}\n\n	if (option) {\n		// change the mouse cursor so user gets some feedback\n		\$('settingsForm').setStyle({cursor:'wait'});\n		new Ajax.Updater( { success: 'settingsRegion' }, url, {\n			method: 'post',\n			postBody: 'ajaxUpdate=1&player=";
#line 39 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
    $output .=  $stash->get('playerURI');
#line 39 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
    if ($stash->get('playerid')) {
    $output .=  "&playerid=";
#line 39 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('uri')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('playerid');
        
        &$_tt_filter($output);
    };
    
    }
    
    $output .=  "',\n			evalScripts: true,\n			asynchronous: true,\n			onFailure: function(t) {\n				alert('Error -- ' + t.responseText);\n			},\n			onComplete: function(t) {\n				\$('settingsForm').setStyle({cursor:'auto'});\n				\$('statusarea').update('');\n				resizeSettingsSection();\n			}\n		} );\n		//document.forms.settingsForm.action = url;\n	}\n}\n\nfunction prefValidate(myPref, namespace) {\n	new Ajax.Request('/jsonrpc.js', {\n		method: 'post',\n\n		postBody: Object.toJSON({\n			id: 1, \n			method: 'slim.request', \n			params: [\n				'', \n				[\n					'pref', \n					'validate', \n					namespace + ':' + myPref.name, \n					myPref.value\n				]\n			]\n		}),\n\n		onSuccess: function(response) {\n			var json = response.responseText.evalJSON();\n\n			// preference did not validate - highlight the field\n			highlightField(myPref, (json.result.valid == '1'));\n		}\n	});\n}\n\nfunction resizeSettingsSection() {\n	var winHeight = (\n		document.documentElement && document.documentElement.clientHeight\n		? parseInt(window.innerHeight, 10)\n		: parseInt(document.body.offsetHeight, 10)\n	);\n	var settingsTop = Position.cumulativeOffset(\$('innerSettingsBlock'))[1];\n	var submitHeight = \$('prefsSubmit').offsetHeight + 10;\n\n	if ((winHeight - parseInt(settingsTop, 10) - parseInt(submitHeight, 10)) > 0) {\n		\$('innerSettingsBlock').setStyle({\n			'height': (winHeight - parseInt(settingsTop, 10) - parseInt(submitHeight, 10) - 10) + 'px'\n		});\n	}\n\n}\n\nfunction initSettingsForm() {\n	// try to redirect all form submissions by return key to the default submit button\n	// listen for keypress events on all form elements except submit\n	\$('settingsForm').getElements().each(function(ele) {\n		if (ele.type != 'submit') {\n			new Event.observe(ele, 'keypress', function(e) {\n				var cKeyCode = e.keyCode || e.which;\n				if (cKeyCode == Event.KEY_RETURN) {\n					Event.stop(e);\n					\$('saveSettings').activate();\n				}\n			});\n		}\n	});\n	\n	new Event.observe('choose_setting', 'keypress', function(e){ \n		var cKeyCode = e.keyCode || e.which;\n		if (cKeyCode == Event.KEY_UP || cKeyCode == Event.KEY_DOWN) {\n			Event.stop(e);\n			var t = \$('choose_setting');\n			chooseSettings(t.selectedIndex,t.options[t.selectedIndex].value);\n		}\n	});\n\n	// resize the scrolling part of the settings page\n	new Event.observe(window, 'resize', function(){resizeSettingsSection();});\n\n	if (\$('popupWarning')) {\n		var msg = \$('popupWarning').innerHTML;\n		msg = msg.replace(/<br\\/?>/ig, ' \\n');\n		alert(msg.stripTags());\n	}\n\n	resizeSettingsSection();\n};\n\nvar bgColors = new Array;\nfunction highlightField(field, valid) {\n	if (!bgColors[field]) {\n		bgColors[field] = field.getStyle('backgroundColor'); \n	}\n\n	if (valid) {\n		// restore the background before calling the effect\n		// using it as targetcolor didn't work\n		field.setStyle({backgroundColor: bgColors[field]});\n		new Effect.Highlight(field, {\n			duration: 0.5,\n			startcolor: '#99ff99'\n		});\n	}\n	else {\n		field.setStyle({backgroundColor: '#ffcccc'});\n	}\n}\n\nAjax.FileSelector = Class.create();\nObject.extend(Object.extend(Ajax.FileSelector.prototype, Ajax.Autocompleter.prototype), {\n	initialize: function(element, foldersOnly) {\n		this.baseInitialize(element, 'fileselectorautocomplete', {\n				paramName: 'currDir',\n				parameters: (foldersOnly ? 'foldersonly=1' : ''),\n				frequency: 0.7,\n				indicator: \$('fileselectorindicator'),\n				afterUpdateElement: function(item) {\n					if (bgColors[item])\n						item.setStyle({backgroundColor: bgColors[item]});\n					item.focus();\n				}\n			}\n		);\n		this.options.asynchronous = true;\n		this.options.onComplete = this.onComplete.bind(this);\n		this.url = '/settings/server/fileselector_autocomplete.html';\n	},\n\n	startIndicator: function() {\n		var indicatorStyle = this.options.indicator.style;\n		Position.clone(this.element, this.options.indicator, {\n			setHeight: false,\n			setWidth: false,\n			offsetLeft: this.element.offsetWidth\n		});\n		this.options.indicator.style.position = 'absolute';\n		Element.show(this.options.indicator);\n	}\n});\n\nfunction initNewAlarm(alarmId) {\n	\$('alarm_remove_' + alarmId).observe('click', function() {\n		\$('alarmtime' + alarmId).value = '';\n		\$('alarm' + alarmId).hide();\n		\$('button' + alarmId).show();\n	});\n\n	\$('AddAlarm').observe('click', function() {\n		\$('alarm' + alarmId).show();\n		\$('button' + alarmId).hide();\n	});\n\n	\$('alarm' + alarmId).hide();\n	\$('button' + alarmId).show();\n}";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'addSetupCaseLinks' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
        $output .=  "\n		";
#line 13 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
        if ($stash->get('setuplinks')) {
        $output .=  "\n			";
#line 12 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
        
        # FOREACH 
        do {
            my ($_tt_value, $_tt_error, $_tt_oldloop);
            my $_tt_list = $stash->get('setuplinks');
            
            unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
                $_tt_list = Template::Config->iterator($_tt_list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($_tt_value, $_tt_error) = $_tt_list->get_first();
            eval { $_tt_oldloop = $stash->get('loop') };
            $stash->set('loop', $_tt_list);
            eval {
        LOOP:   while (! $_tt_error) {
                    $stash->{'setuplink'} = $_tt_value;
        $output .=  "\n			case \"";
#line 5 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
        $output .=  $stash->get(['setuplink', 0, 'key', 0]);
        $output .=  "\":\n				url = \"";
#line 6 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
        $output .=  $stash->get('webroot');
#line 6 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
        $output .=  $stash->get(['setuplink', 0, 'value', 0]);
        $output .=  "\"\n				page = \"";
#line 7 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
        $output .=  $stash->get(['setuplink', 0, 'key', 0]);
        $output .=  "\"\n				suffix = \"page=\" + page\n				";
#line 10 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
        if ($stash->get('cookie')) {
        $output .=  "homestring = \"";
#line 9 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('string')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['setuplink', 0, 'key', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "\"\n				cookie = ";
#line 10 "/usr/share/squeezeboxserver/HTML/EN/html/settings.js"
        $output .=  $stash->get('cookie');
        }
        
        $output .=  "\n			break;\n			";;
                    ($_tt_value, $_tt_error) = $_tt_list->get_next();
                }
            };
            $stash->set('loop', $_tt_oldloop);
            die $@ if $@;
            $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
            die $_tt_error if $_tt_error;
        };
        
        $output .=  "\n		";
        }
        
        $output .=  "\n	";
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
    },
});
