#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => '/usr/share/squeezeboxserver/HTML/EN/html/docs/plugins.html',
        'modtime' => '1518618963',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 1 "/usr/share/squeezeboxserver/HTML/EN/html/docs/plugins.html"
    $stash->set('pagetitle', 'Logitech Media Server Plugins');
    $output .=  "\n";
#line 2 "/usr/share/squeezeboxserver/HTML/EN/html/docs/plugins.html"
    $stash->set('techinfo', '1');
    $output .=  "\n";
#line 3 "/usr/share/squeezeboxserver/HTML/EN/html/docs/plugins.html"
    $stash->set('lefttoright', '1');
    $output .=  "\n";
#line 4 "/usr/share/squeezeboxserver/HTML/EN/html/docs/plugins.html"
    $output .=  $context->process('helpheader.html');
    $output .=  "\n\n <h4>Introduction</h4>\n<p>This document illustrates the basic framework upon which to build a Plugin or module compatible with the Logitech Media Server software. \nThe server provides a method to load custom modules at startup which are then made available to the user via remote control menus. \nEach plugin serves as an area within the server remote menu system, available from within the Plugins menu. Plugin files are stored in \nthe &quot;Plugins&quot; folder which is in the same folder as the server software. For simple plugins, a single file in this folder will suffice.\n For more complex plugins, you can store an entire set of files in a sub-folder, naming the main plugin file: Plugin.pm. The Plugin interface can \n provide a very powerful \ncontrol and has complete access to the functionality of the server. As with the rest of the server, plugin modules are created \nusing the Perl language.</p>\n\n<h4>Perl Module Basics</h4>\n		<p>Here are a couple of basic calls that should be made at the beginning of the Plugin code:</p>\n		<pre>use strict;</pre>\n		<p>This tells Perl to do some useful error checking to help avoid the use of undeclared variables, or ambiguous references to functions. All references must be fully qualified (ie Slim::Buttons::Common::popMode() instead of popMode()).</p>\n		<p><pre>package Plugins::pluginname;</pre></p>\n		<p>Where <code>pluginname</code> is the name of the module (which should be the same as the filename, without the .pm extension.) This defines the 'namespace' for the module. It essentially sets up the module as an entity of its own, within the server environment. This allows you to then refer to the functions and variables within this plugin by the full reference Plugins::pluginname::function.</p>\n		<hr>\n		<h4>Logitech Media Server Plugin Hooks</h4>\n<p>Each level in the server menu hierarchy is considered a &quot;mode&quot; by the server. Each time the server is started, it reads the Plugins directory for modules. Each is added, by name, into a list. Each plugin is given a mode, and a set of functions that are defined within that module. The plugins can each be enabled or disabled at will from the web interface. The plugin module itself must define a mode and functions in a form that the server is expecting. This comes from two functions: sub setMode() and sub getFunctions(). A third subroutine, sub getDisplayName() is required to provide the name that the server should display for the plugin. Simple examples of these three functions are below. We will now build a template based on these main functions.</p>\n<blockquote>\n<p><em>Example 1</em></p>\n<pre>\n  sub setMode &#123;\n     my \$client = shift;\n     \$client->lines(\\&lines);\n  &#125;\n\n  sub getFunctions &#123;\n     return \\%functions;\n  &#125;\n\n  sub getDisplayName &#123; return \"MY_PLUGIN_STRING_TOKEN\")&#125;\n\n  sub strings &#123; return '\n    MY_PLUGIN_STRING_TOKEN\n    &lt;tab&gt; EN &lt;tab&gt; My Plugin English Name\n'&#125;;\n\n			</pre></blockquote>\n<hr>\n\n<h4>Modes</h4>\n<p>If you wish for your plugin to have a player display interface, then you will need to set up what is called a Mode.  The remote buttons are context sensitive, meaning that they can serve different roles when the server is in different modes.  The setMode()\nsubroutine defines this mode.  Within this subroutine, there must be a definition for \$client->lines, which is the text to be displayed on the\nSlim client while in this plugin mode.  Typically, this is labeled just as above, though it can be any name you wish. The lines subroutine, or other name\nif you have chosen one, returns a hash defining the display to be shown on the player.  This can be updated at any time from any point in the plugin module by using the\nline:</p>\n<blockquote>\n			<pre>\n\$client->update();\n</pre></blockquote>\n<p>Also included in the setMode subroutine are any commands or functions that must be run each time the plugin is called.  This may be loading an array for a menu system,\ndefault settings, or running any number of other subroutines that are needed for the operation of the plugin.\n</p><p>\nYou may also want to add extra modes under your plugin.  There is a function call that tells the server\nto add your new mode with its setMode and getFunctions references.  </p>\n<blockquote>\n			<pre>Slim::Buttons::Common::addMode('newmodename', getNewModeFunctions(), \\&amp;::PluginName::setNewMode);</pre></blockquote>\n<p>and then you can include the following in your plugin to hook-in to your new mode:</p>\n<blockquote><pre>\nsub setNewMode &#123;\n   my \$client = shift;\n   \$client->lines(\\&newModeLines);\n&#125;\n\nsub getNewModeFunctions &#123;\n   return \\%newModeFunctions;\n&#125;</pre>\n</blockquote>\n<hr>\n<h4>Functions</h4>\n<p>The server handles all commands from the remote control for each mode by creating a hash table of functions, each button having a subroutine associated with it.  The subroutine getFunctions() returns a reference to this hash, and can be any label you wish, although typically %functions is used. The call to point to this list is shown above in example 1. The function list, should look something like this example taken from rescan.pm, which is included with the server:</p>\n<blockquote>\n<p><em>Example 2</em></p>\n<pre>\n   my %functions = (\n     'up' => sub  &#123;\n        my \$client = shift;\n        \$client->bumpUp();\n     &#125;,\n     'down' => sub  &#123;\n        my \$client = shift;\n        \$client->bumpDown();\n     &#125;,\n     'left' => sub  &#123;\n        my \$client = shift;\n        Slim::Buttons::Common::popModeRight(\$client);\n     &#125;,\n     'right' => sub  &#123;\n        my \$client = shift;\n        \$client->bumpRight();\n     &#125;,\n     'play' => sub &#123;\n        my \$client = shift;\n        my \@pargs=('rescan');\n        Slim::Control::Request::executeRequest(\$client, \\\@pargs);\n        \$client->showBriefly( {\n	    \$client->string('PLUGIN_RESCAN_MUSIC_LIBRARY'),\n	    \$client->string('PLUGIN_RESCAN_RESCANNING'),\n        &#125);\n     &#125;\n  );\n</pre></blockquote>\n\n<p>Each remote button (eg. 'play') points to a subroutine to be performed each time that button is pressed.  In the case above, pressing play\nsets up local variables, starts a rescan of the entire library, then shows two lines on the display for a short time to tell the user that the\nrescan has been started.  The line \"my \$client = shift;\" is very important here to keep track of the player status, and to pass on in server\nfunction calls such as: </p>\n<blockquote>\n			<pre>\$client->showBriefly();</pre></blockquote>\n		<p>Examples of remote control functions include: 'up','down','play,'add' (REC button),'left','right','numberScroll' and 'stop' The full button to function map is found in the Default.map file, which is in the IR directory under the Logitech Media Server directory.</p>\n\n<hr>\n<h4>Player Menu</h4>\n<p>By default, plugins will appear in the Plugins menu on the player. However, some plugins may be similar to others, and could be better organised into submenus.  The addMenu function allows a \nplugin to choose its submenu location:</p>\n\n<p>The simple line subroutine, below, is taken from Picks.pm.</p>\n<blockquote>\n<p><em>Example 3</em></p>\n<pre>sub addMenu &#123;\n	return \"RADIO\";\n&#125;;\n</pre></blockquote>\nThis will make the plugin appear in a submenu with the string token RADIO.  This submenu string can then be localized by the server to the chosen language.  Each submenu can, as an option, be added to the top level \nmenus for any player via the player settings.\n\n\n<hr>\n<h4>Lines</h4>\n<p>The lines subroutine returns the text that the Slim Client will display while using your plugin. The setMode() function creates the reference for the lines subroutine, and your lines subroutine name must match that. Each mode may have its own lines subroutine, and each is named after the reference created in each setMode. The input for this function is the current client information, and the return is a hash defining the display. This is defined in detail in <a href=\"display.html\">Display API</a>.\n<p>The lines are sent to the display at any time using the command:</p>\n<blockquote>\n			<pre>\n\$client->update();\n</pre></blockquote>\n<p>The simple line subroutine, below, is taken from Rescan.pm.</p>\n<blockquote>\n<p><em>Example 4</em></p>\n<pre>sub lines &#123;\n   my \$client = shift;\n   return &#123\n       'line1' => \$client->string('PLUGIN_RESCAN_MUSIC_LIBRARY'),\n       'line2' => \$client->string('PLUGIN_RESCAN_PRESS_PLAY'),\n   &#125;\n&#125\n</pre></blockquote>\n\n<hr>\n<h4>Strings</h4>\n<p>The plugin API also allows you to add in your own localization. The format of the strings list follows the same format as the strings.txt file used by the server for localization. The function strings() can be used within the plugin to extract a strings for the user's specified language. Defining the strings is done as follows:</p>\n<blockquote>\n<p><em>Example 6</em></p>\n<pre>sub strings &#123; return '\nPLUGIN_STRING_ONE\n&lt;tab&gt; EN &lt;tab&gt; English version of line one\n&lt;tab&gt; FR &lt;tab&gt; Version française de la ligne une\n'&#125;;\n</pre></blockquote>and to use your strings in your module, you make the call to strings in any place where you would use a text string.   For example:\n			<pre>\$client->string('MY_STRING');</pre></blockquote>\nwhere your strings function contains:\n<blockquote><pre>\nsub strings &#123; return '\nMY_STRING\n<i>&lt;tab&gt;</i> EN <i>&lt;tab&gt;</i> Useful text\n'&#125;;\n</pre></blockquote>\n<p><b>One special note, the format of the strings list is very strict. The whitespace must be a tab, not spaces, which is why the tabs are shown above.</b></p>\n<hr>\n<h4>Web Interface</h4>\n<p>Logitech Media Server Plugins can expose their own web interface, accessible through\nthe main server's web pages. To do this, include a function called \n\"webPages\" which returns a list of two values: a hash reference to handler \nfunctions for the plugin's pages, and a string representing the path of\nthe plugin's index page.</p>\n\n<p>The handler function hash contains keys that represent regular\nexpression values.  These regular expressions match URL paths that\nwill be handled by the corresponding page handler. For example, the\nregular expression \"index\\.(?:htm|xml)\" will match the URL paths\n\"index.html\", \"index.htm\" or \"index.xml\".</p>\n\n<p>The index page string represents the URL path for a link that will\nbe included in the \"Plugins\" section of the server index\npage. When exposed through the server's web interface, all plugin\nweb pages are prepended with the URL path\nhttp://&lt;host&gt;/plugins/&lt;pluginname&gt;/. However, neither the regular\nexpression keys nor the index URL path need to take this prefix\ninto account.</p>\n\n<blockquote>\n<p><em>Example 7</em></p>\n<pre>sub webPages {\n    my %pages = (\n        \"index\\.(?:htm|xml)\" => \\&handleIndex,\n	\"enable\\.(?:htm|xml)\" => \\&handleEnable,\n    );\n\n    return (\\%pages, \"index.html\");\n}\n</pre>\n</blockquote>\n\n<p>Plugins also have the option of adding links to other sections of\nthe server index page. Specifically, links can be added to the\n\"browse\", \"search\", \"settings\", \"plugins\" and \"help\" sections. Note\nthat not all skins may support every section. Links can be added using\nthe Slim::Web::Pages::addLinks() method. The method takes two\nparameters: the category to which links should be added, and a\nreference to a hash that maps link text to a URL path. In this case,\nthe URL path must include the \"plugins/&lt;pluginname&gt;/\" prefix.\n</p>\n\n<blockquote>\n<pre>Slim::Web::Pages::addLinks(\"search\", {\n    \$client->string('PLUGIN_MYPLUGIN_SEARCH_LINK') => \"plugins/MyPlugin/search.html\",\n);\n</pre>\n</blockquote>\n\n<hr>\n<h4>ScreenSavers</h4>\nYou can turn any plugin into a custom screensaver by registering your plugin as a screensaver.  The plugin should \nbe used to give the user any settings options or to set the screensaver as active or reset to default.  You can register the screensaver using the following subroutine:\n<pre>\nsub screenSaver {\n	my \$client = shift;\n\n	Slim::Buttons::Common::addSaver('SCREENSAVER.saverModeName',\n		getScreensaverFunctions(),\n		\\&setScreensaverMode,\n		\\&leaveScreensaverMode,\n		\$client->string('PLUGIN_SCREENSAVER_NAME'));\n}\n</pre>\n<dl>\n<dt>SCREENSAVER.saverModeName</dt><dd>Change this to provide a unique name for your screensaver.  Using the prefix \"SCREENSAVER\" will indicate to the server that your mode is of the screensaver class, and match the IR mappings from the [screensaver] section of Default.map</dd>\n<dt>getScreensaverFunctions()</dt><dd>This subroutine, just like getFunctions points to the function has for the screensaver mode.</dd>\n<dt>setScreensaverMode</dt><dd>subroutine just like setMode to initialize anything you need for the screensaver mode.</dd>\n<dt>leaveScreensaverMode</dt><dd>subroutine to execute before the mode exits</dd>\n<dt>\$client->string('SCREENSAVER_NAME')</dt><dd>SCREENSAVER_NAME should be change to a unique identifier for your plugin name.  This can be the same as your plugin, or something different.  This allows for future nationalisation for the other languages supported by server.</dd>\n</dl>\n\n<hr>\n<h4>Other Functions</h4>\n<p>There are several other optional plugin functions that allow you to control how you plugin will integrate with the server:</p>\n<dl>\n<dt>initPlugin()</dt><dd>subroutine to handle any operations that your plugin needs to execute on startup, on when the plugin becomes enabled.</dd>\n<dt>shutdownPlugin()</dt><dd>subroutine to handle any operations that need to be performed to shut down the plugin cleanly, or to be run when disabled. This is particularly useful in cases\n\nwhere external processes need to be informed or resources need to be freed when the plugin is shut down</dd>\n<dt>enabled()</dt><dd>a subroutine to test the conditions required for the plugin to be enabled.  returns a logical true/false indicating whether the plugin can be enabled.</dd>\n<dt>defaultMap()</dt><dd>automatically loaded by the server if this is present, this routine can override the IR button mapping found in IR/Default.map for your plugin mode see <a href=\"buttons.html\">Button Mapping</a> for details on mapping.</dd>\n</dl>\n\n<hr>\n<h4>Summary</h4>\n<p>Using the existing plugins as examples (one appears below) and this document as an explanation of what each section of the plugin can do, you should now be able to start working on a plugin of your own. Remember that this is only a framework to allow you to hook into the server. There are always many other ways to implement the features of a plugin. As long as your provide the lines from the examples above, the server will try to work with your Plugin. The rest can be just about anything you want, including using any of functions and subroutines within the server.  Remember, there's more than one way to do it.</p>\n<p>Happy Coding!\n<hr>\n<h4>NOTE:</h4>\n<p>Plugins made for server version before 5.0 need to be updated using whack.pl, included in the tools directory of the CVS version of server 5.0 and higher. Syntax for this command is:\n<blockquote>\n			<pre>whack.pl myplugin.pm...\n</pre></blockquote>\n<p>This will rewrite myplugin.pm (and any other specified files), leaving a copy of the script in myplugin.pm.old, to use the new module layout.\n<hr>\n<h4>Appendix: Sample Plugin</h4>\n<pre># Rescan.pm by Andrew Hedges (andrew\@hedges.me.uk) October 2002\n#\n# This code is derived from code with the following copyright message:\n#\n# Logitech Media Server Copyright 2001-2011 Logitech.\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License,\n# version 2.\nuse strict;\n\n###########################################\n### Section 1. Change these as required ###\n###########################################\n\npackage Plugins::Rescan;\n\nuse Slim::Player::Playlist;\nuse Slim::Utils::Strings qw (string);\n\nsub getDisplayName {\n	return 'PLUGIN_RESCAN_MUSIC_LIBRARY'\n};\n\nsub strings {  return '\nPLUGIN_RESCAN_MUSIC_LIBRARY\n	EN	Rescan Music Library\n	\nPLUGIN_RESCAN_RESCANNING\n	EN	Server now rescanning...\n\nPLUGIN_RESCAN_PRESS_PLAY\n	EN	Press PLAY to rescan your music folder\n'};\n\n##################################################\n### Section 2. Your variables and code go here ###\n##################################################\n\n\nsub setMode {\n	my \$client = shift;\n	\$client-&gt;lines(\\&amp;lines);\n}\n\nsub enabled { \n	my \$client = shift;\n	return !Slim::Music::iTunes::useiTunesLibrary();\n}\n\nmy %functions = (\n	'up' =&gt; sub { \n		my \$client = shift;\n		\$client->bumpUp();\n	},\n	'down' =&gt; sub { \n	    my \$client = shift;\n		\$client->bumpDown();\n	},\n	'left' =&gt; sub {\n		my \$client = shift;\n		Slim::Buttons::Common::popModeRight(\$client);\n	},\n	'right' =&gt; sub {\n		my \$client = shift;\n		\$client->bumpRight();\n	},\n	'play' =&gt; sub {\n		my \$client = shift;\n		my \@pargs=('rescan');\n		Slim::Control::Request::executeRequest(\$client, \\\@pargs);\n		\$client->showBriefly( {\n			'line1' => \$client->string('PLUGIN_RESCAN_MUSIC_LIBRARY'),\n			'line2' => \$client->string('PLUGIN_RESCAN_RESCANNING'),\n		});\n	}\n);\n\nsub lines {\n	my \$client = shift;\n	return {\n		'line1' => \$client->string('PLUGIN_RESCAN_MUSIC_LIBRARY'),\n		'line2' => \$client->string('PLUGIN_RESCAN_PRESS_PLAY'),\n	};\n}\n	\n################################################\n### End of Section 2.                        ###\n################################################\n\nsub getFunctions {\n	return \\%functions;\n}\n\n1;\n</pre>\n	\n";
#line 370 "/usr/share/squeezeboxserver/HTML/EN/html/docs/plugins.html"
    $output .=  $context->process('helpfooter.html');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
