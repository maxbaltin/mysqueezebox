#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1518618963',
        'name' => 'html/lightbox/lightbox.js',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "/*!\n * Ext Core Library \$version&#xD;&#xA;http://extjs.com/&#xD;&#xA;Copyright(c) 2006-2009, \$author.&#xD;&#xA;&#xD;&#xA;The MIT License&#xD;&#xA;&#xD;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xD;&#xA;of this software and associated documentation files (the &quot;Software&quot;), to deal&#xD;&#xA;in the Software without restriction, including without limitation the rights&#xD;&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xD;&#xA;copies of the Software, and to permit persons to whom the Software is&#xD;&#xA;furnished to do so, subject to the following conditions:&#xD;&#xA;&#xD;&#xA;The above copyright notice and this permission notice shall be included in&#xD;&#xA;all copies or substantial portions of the Software.&#xD;&#xA;&#xD;&#xA;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xD;&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xD;&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xD;&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xD;&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xD;&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#xD;&#xA;THE SOFTWARE.&#xD;&#xA;\n */\nExt.ns('Ext.ux');\n\nExt.ux.Lightbox = (function(){\n    var els = {},\n        images = [],\n        activeImage,\n        initialized = false,\n        selectors = [];\n\n    return {\n        overlayOpacity: 0.85,\n        animate: true,\n        resizeSpeed: 8,\n        borderSize: 10,\n        labelImage: \"Image\",\n        labelOf: \"of\",\n\n        init: function() {\n            this.resizeDuration = this.animate ? ((11 - this.resizeSpeed) * 0.15) : 0;\n            this.overlayDuration = this.animate ? 0.2 : 0;\n\n            if(!initialized) {\n                Ext.apply(this, Ext.util.Observable.prototype);\n                Ext.util.Observable.constructor.call(this);\n                this.addEvents('open', 'close');\n                this.initMarkup();\n                this.initEvents();\n                initialized = true;\n            }\n        },\n\n        initMarkup: function() {\n            els.shim = Ext.DomHelper.append(document.body, {\n                tag: 'iframe',\n                id: 'ux-lightbox-shim'\n            }, true);\n            els.overlay = Ext.DomHelper.append(document.body, {\n                id: 'ux-lightbox-overlay'\n            }, true);\n            \n            var lightboxTpl = new Ext.Template(this.getTemplate());\n            els.lightbox = lightboxTpl.append(document.body, {}, true);\n\n            var ids =\n                ['outerImageContainer', 'imageContainer', 'image', 'hoverNav', 'navPrev', 'navNext', 'loading', 'loadingLink',\n                'outerDataContainer', 'dataContainer', 'data', 'details', 'caption', 'imageNumber', 'bottomNav', 'navClose'];\n\n            Ext.each(ids, function(id){\n                els[id] = Ext.get('ux-lightbox-' + id);\n            });\n\n            Ext.each([els.overlay, els.lightbox, els.shim], function(el){\n                el.setVisibilityMode(Ext.Element.DISPLAY)\n                el.hide();\n            });\n\n            var size = (this.animate ? 250 : 1) + 'px';\n            els.outerImageContainer.setStyle({\n                width: size,\n                height: size\n            });\n        },\n\n        getTemplate : function() {\n            return [\n                '<div id=\"ux-lightbox\">',\n                    '<div id=\"ux-lightbox-outerImageContainer\">',\n                        '<div id=\"ux-lightbox-imageContainer\">',\n                            '<img id=\"ux-lightbox-image\">',\n                            '<div id=\"ux-lightbox-hoverNav\">',\n                                '<a href=\"#\" id=\"ux-lightbox-navPrev\"></a>',\n                                '<a href=\"#\" id=\"ux-lightbox-navNext\"></a>',\n                            '</div>',\n                            '<div id=\"ux-lightbox-loading\">',\n                                '<a id=\"ux-lightbox-loadingLink\"></a>',\n                            '</div>',\n                        '</div>',\n                    '</div>',\n                    '<div id=\"ux-lightbox-outerDataContainer\">',\n                        '<div id=\"ux-lightbox-dataContainer\">',\n                            '<div id=\"ux-lightbox-data\">',\n                                '<div id=\"ux-lightbox-details\">',\n                                    '<span id=\"ux-lightbox-caption\"></span>',\n                                    '<span id=\"ux-lightbox-imageNumber\"></span>',\n                                '</div>',\n                                '<div id=\"ux-lightbox-bottomNav\">',\n                                    '<a href=\"#\" id=\"ux-lightbox-navClose\"></a>',\n                                '</div>',\n                            '</div>',\n                        '</div>',\n                    '</div>',\n                '</div>'\n            ];\n        },\n\n        initEvents: function() {\n            var close = function(ev) {\n                ev.preventDefault();\n                this.close();\n            };\n\n            els.overlay.on('click', close, this);\n            els.loadingLink.on('click', close, this);\n            els.navClose.on('click', close, this);\n\n            els.lightbox.on('click', function(ev) {\n                if(ev.getTarget().id == 'ux-lightbox') {\n                    this.close();\n                }\n            }, this);\n\n            els.navPrev.on('click', function(ev) {\n                ev.preventDefault();\n                this.setImage(activeImage - 1);\n            }, this);\n\n            els.navNext.on('click', function(ev) {\n                ev.preventDefault();\n                this.setImage(activeImage + 1);\n            }, this);\n        },\n\n        register: function(sel, group) {\n            if(selectors.indexOf(sel) === -1) {\n                selectors.push(sel);\n\n                Ext.fly(document).on('click', function(ev){\n                    var target = ev.getTarget(sel);\n\n                    if (target) {\n                    	ev.preventDefault();\n                        this.open(target, sel, group);\n                    }\n                }, this);\n            }\n        },\n\n        open: function(image, sel, group, slideWindow) {\n            group = group || false;\n            this.setViewSize();\n            els.overlay.fadeIn({\n                duration: this.overlayDuration,\n                endOpacity: this.overlayOpacity,\n                callback: function() {\n                    images = [];\n\n                    var index = 0;\n                    if(!group) {\n                        images.push([image.href, image.title || image.text]);\n                    }\n                    else {\n                        var setItems = slideWindow ? slideWindow.Ext.query(sel) : Ext.query(sel);\n                        Ext.each(setItems, function(item) {\n                            if(item.href) {\n                                images.push([item.href, item.title || item.text]);\n                            }\n                        });\n\n                        while (images[index][0] != image.href) {\n                            index++;\n                        }\n                    }\n\n                    // calculate top and left offset for the lightbox\n                    var pageScroll = Ext.fly(document).getScroll();\n\n                    var lightboxTop = Math.min(pageScroll.top + (Ext.lib.Dom.getViewportHeight() / 10), 40);\n                    var lightboxLeft = pageScroll.left;\n                    els.lightbox.setStyle({\n                        top: lightboxTop + 'px',\n                        left: lightboxLeft + 'px'\n                    }).show();\n\n                    this.setImage(index);\n                    \n                    this.fireEvent('open', images[index]);                                        \n                },\n                scope: this\n            });\n        },\n        \n        setViewSize: function(){\n            var viewSize = this.getViewSize();\n            els.overlay.setStyle({\n                width: viewSize[0] + 'px',\n                height: viewSize[1] + 'px'\n            });\n            els.shim.setStyle({\n                width: viewSize[0] + 'px',\n                height: viewSize[1] + 'px'\n            }).show();\n        },\n\n        setImage: function(index){\n            activeImage = index;\n                      \n            this.disableKeyNav();            \n            if (this.animate) {\n                els.loading.show();\n            }\n\n            els.image.hide();\n            els.hoverNav.hide();\n            els.navPrev.hide();\n            els.navNext.hide();\n            els.dataContainer.setOpacity(0.0001);\n            els.imageNumber.hide();\n\n            var preload = new Image();\n            preload.onload = (function(){\n                els.image.dom.src = images[activeImage][0];\n                this.resizeImage(preload.width, preload.height);\n            }).createDelegate(this);\n            preload.src = images[activeImage][0];\n        },\n\n        resizeImage: function(w, h){\n            var wCur = els.outerImageContainer.getWidth();\n            var hCur = els.outerImageContainer.getHeight();\n            \n            var viewSize = this.getViewSize();        \n            var closeHeight = 100;\n\n            var wNew = (w + this.borderSize * 2);\n            var hNew = (h + this.borderSize * 2);\n            \n            var ratio = h/w;\n            \n            if (wNew > viewSize[0]) {\n            	wNew = viewSize[0];\n            	h = wNew * ratio;\n            	hNew = h + this.borderSize * 2;\n	            w = wNew - this.borderSize * 2;\n            }\n            \n            if (hNew > viewSize[1] - closeHeight) {\n            	hNew = viewSize[1] - closeHeight;\n            	wNew = hNew / ratio;\n	            w = wNew - this.borderSize * 2;\n	            h = hNew - this.borderSize * 2;\n            }\n\n            var wDiff = wCur - wNew;\n            var hDiff = hCur - hNew;\n\n            var afterResize = function(){\n                els.hoverNav.setWidth(els.imageContainer.getWidth() + 'px');\n\n                els.navPrev.setHeight(h + 'px');\n                els.navNext.setHeight(h + 'px');\n\n                els.outerDataContainer.setWidth(wNew + 'px');\n\n                els.image.setWidth(w);\n                els.image.setHeight(h);\n                this.showImage();\n            };\n            \n            if (hDiff != 0 || wDiff != 0) {\n                els.outerImageContainer.shift({\n                    height: hNew,\n                    width: wNew,\n                    duration: this.resizeDuration,\n                    scope: this,\n                    callback: afterResize,\n                    delay: 50\n                });\n            }\n            else {\n                afterResize.call(this);\n            }\n        },\n\n        showImage: function(){\n            els.loading.hide();\n            els.image.fadeIn({\n                duration: this.resizeDuration,\n                scope: this,\n                callback: function(){\n                    this.updateDetails();\n                }\n            });\n            this.preloadImages();\n        },\n\n        updateDetails: function(){\n            var detailsWidth = els.data.getWidth(true) - els.navClose.getWidth() - 10;\n            els.details.setWidth((detailsWidth > 0 ? detailsWidth : 0) + 'px');\n            \n            els.caption.update('<a href=\"' + images[activeImage][0] + '\" target=\"_blank\">' + images[activeImage][1] + '</a>');\n\n            els.caption.show();\n            if (images.length > 1) {\n                els.imageNumber.update(this.labelImage + ' ' + (activeImage + 1) + ' ' + this.labelOf + '  ' + images.length);\n                els.imageNumber.show();\n            }\n\n            els.dataContainer.fadeIn({\n                duration: this.resizeDuration/2,\n                scope: this,\n                callback: function() {\n                    var viewSize = this.getViewSize();\n                    els.overlay.setHeight(viewSize[1] + 'px');\n                    this.updateNav();\n                }\n            });\n        },\n\n        updateNav: function(){\n            this.enableKeyNav();\n\n            els.hoverNav.show();\n\n            // if not first image in set, display prev image button\n            if (activeImage > 0)\n                els.navPrev.show();\n\n            // if not last image in set, display next image button\n            if (activeImage < (images.length - 1))\n                els.navNext.show();\n        },\n\n        enableKeyNav: function() {\n            Ext.fly(document).on('keydown', this.keyNavAction, this);\n        },\n\n        disableKeyNav: function() {\n            Ext.fly(document).un('keydown', this.keyNavAction, this);\n        },\n\n        keyNavAction: function(ev) {\n            var keyCode = ev.getKey();\n\n            if (\n                keyCode == 88 || // x\n                keyCode == 67 || // c\n                keyCode == 27\n            ) {\n                this.close();\n            }\n            else if (keyCode == 80 || keyCode == 37){ // display previous image\n                if (activeImage != 0){\n                    this.setImage(activeImage - 1);\n                }\n            }\n            else if (keyCode == 78 || keyCode == 39){ // display next image\n                if (activeImage != (images.length - 1)){\n                    this.setImage(activeImage + 1);\n                }\n            }\n        },\n\n        preloadImages: function(){\n            var next, prev;\n            if (images.length > activeImage + 1) {\n                next = new Image();\n                next.src = images[activeImage + 1][0];\n            }\n            if (activeImage > 0) {\n                prev = new Image();\n                prev.src = images[activeImage - 1][0];\n            }\n        },\n\n        close: function(){\n            this.disableKeyNav();\n            els.lightbox.hide();\n            els.overlay.fadeOut({\n                duration: this.overlayDuration\n            });\n            els.shim.hide();\n            this.fireEvent('close', activeImage);\n        },\n\n        getViewSize: function() {\n            return [Ext.lib.Dom.getViewWidth(), Ext.lib.Dom.getViewHeight()];\n        }\n    }\n})();\n\nExt.onReady(Ext.ux.Lightbox.init, Ext.ux.Lightbox);";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
