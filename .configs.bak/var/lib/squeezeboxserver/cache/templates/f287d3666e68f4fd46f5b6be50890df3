#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => '/usr/share/squeezeboxserver/HTML/EN/html/docs/input.html',
        'modtime' => '1518618963',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 1 "/usr/share/squeezeboxserver/HTML/EN/html/docs/input.html"
    $stash->set('pagetitle', 'Using Input Modes');
    $output .=  "\n";
#line 2 "/usr/share/squeezeboxserver/HTML/EN/html/docs/input.html"
    $stash->set('techinfo', '1');
    $output .=  "\n";
#line 3 "/usr/share/squeezeboxserver/HTML/EN/html/docs/input.html"
    $stash->set('lefttoright', '1');
    $output .=  "\n";
#line 4 "/usr/share/squeezeboxserver/HTML/EN/html/docs/input.html"
    $output .=  $context->process('helpheader.html');
    $output .=  "\n\n  <h4>Overview</h4>\n  <p>\n    The Logitech Media Server software comes equipped with a number (currently five) of\n    generic input modes which can be used by other modes to handle interaction\n    with the user via the remote. This allows module writers to concentrate on\n    what to do with the input rather than the gathering of that input.\n  </p>\n  <p>\n    The general method of using these input modes is to push into them from\n    your module, setting certain parameters as desired. The most important\n    parameter will be <var>callback</var> which is a reference to a function\n    that will be called when the input session is complete, and which will\n    then handle that input. Other parameters will vary depending on the input\n    mode being used.\n  </p>\n  <p>\n    When circumstances indicate the possibility that input is complete, an\n    exit event is generated. The <var>callback</var> function will be invoked\n    to determine the action to be taken. It will be called with parameters\n    indicating the client and the type of exit event. The input modes do not\n    exit themselves, it is left to the <var>callback</var> function to decide\n    when to leave the input mode.\n  </p>\n  <p>\n    Input modes will generally have a <var>valueRef</var> parameter. This will\n    reference the current value of the input. It is a reference so that variables\n    in the calling mode (or elsewhere in the program) can be directly modified\n    by the input mode.  Variables not directly modifiable by means of a\n    reference can be modified in the <var>callback</var> function, or in an\n    <var>onChange</var> function, if available to the input mode.\n  </p>\n  <p>\n    It should be noted that the parameters supplied to the input modes are\n    stored in the stack of mode parameter hashes contained in the client object.\n    As such, all parameters will be accessible to the callback function until\n    the input mode is left. If the mode is popped off the mode stack all\n    parameters will be lost. Any maintenance of the parameters between entries\n    into the input mode are the responsibility of the calling mode.\n  </p>\n  <p>\n    The input mode names are <strong>INPUT.<em>modulename</em></strong>, where \n    <em>modulename</em> is the name of the .pm file. A typical entry into the\n    <strong>INPUT.Text</strong> mode follows:\n<pre>\nSlim::Buttons::Common::pushMode(\$client,'INPUT.Text',\n					&#123;'callback' =&gt; \\&amp;myCallback\n					,'valueRef' =&gt; 'Some Initial String'\n					,'charsRef' =&gt; 'Upper'\n					,'numberLetterRef' =&gt; \\\@myNumberLetterArray\n					,'header' =&gt; string('SOME_STRING_FOR_THE_TOP')\n					&#125;);\n</pre>\n  </p>\n  <h4>The Input Modes</h4>\n  <p>\n    <dl>\n      <dt><a href=\"#Text\">Text</a></dt>\n      <dd>Handles input of arbitrary strings.</dd>\n      <dt><a href=\"#List\">List</a></dt>\n      <dd>Handles selection of an item from a list of options.</dd>\n      <dt><a href=\"#Tree\">Tree</a></dt>\n      <dd>Handles navigation of and selection from a tree of options.</dd>\n      <dt><a href=\"#Time\">Time</a></dt>\n      <dd>Handles input of a time-based variable.</dd>\n      <dt><a href=\"#Bar\">Bar</a></dt>\n      <dd>\n        Handles selection of a number from a range, using the amount a bar\n        is filled to indicate position of the number in the range.\n      </dd>\n    </dl>\n  </p>\n  <h4><a id=\"Text\"></a>Text</h4>\n  <h5>Description</h5>\n  <p>\n    The <strong>Text</strong> input mode is used to enter arbitrary strings.\n    It restricts characters in the string to a list of allowable characters\n    which can be provided when entering the mode. The rightarrow symbol is\n    used to indicate when advancing past the end of the string will generate\n    an exit event. It is never allowed anywhere in the string other than the\n    end. Calling modes should strip off this symbol from the end of the string\n    prior to using the input value.\n  </p>\n  <p>\n    The string is scrolled to keep the cursor within the viewable area, except\n    when the viewable area is scrolled manually. Any change in either the cursor\n    position or the character at the cursor results in the viewable area being\n    snapped back such that the cursor is again visable.\n  </p>\n  <p>\n    On entry into the mode, any characters in the initial string not within the\n    list of allowable characters are replaced by spaces (if the space character\n    is allowable) or are removed.\n  </p>\n  <h5>Parameters</h5>\n  <p>\n    The following parameters are used by the <strong>INPUT.Text</strong> mode. They are listed\n    in the order of likelyhood to be supplied. Other parameters can be supplied\n    for use by the callback function, but will not otherwise have any effect\n    on the <strong>INPUT.Text</strong> behavior.\n  </p>\n  <p>\n    <dl>\n      <dt>callback</dt>\n      <dd>Default: none</dd>\n      <dd>\n        A code reference which is called whenever an exit event occurs. This\n        parameter should always be supplied by the calling mode, otherwise\n        <strong>INPUT.Text</strong> will simply perform a pop mode on an exit event, potentially\n        losing any input. The procedure referenced should take the client object\n        as the first parameter and the exit event type as the second.\n      </dd>\n      <dt>header</dt>\n      <dd>Default: &quot;Enter Text:&quot; (not localized)</dd>\n      <dd>\n        String to display on the top line of the display. This parameter can\n        be interpreted in a number of ways, see above. After the value to be\n        displayed is determined, it is then modified according to the\n        <var>stringHeader</var> and <var>headerAddCount</var> parameters, below.\n      </dd>\n      <dt>stringHeader</dt>\n      <dd>Default: undef</dd>\n      <dd>\n        If set to a true value, the display value of <var>header</var> is\n        passed to the <code>string()</code> function to be localized. If no\n        localized string is defined for the value of <var>header</var>, it is\n        displayed as is.\n      </dd>\n      <dt>valueRef</dt>\n      <dd>Default: &quot;&quot;</dd>\n      <dd>\n        <var>valueRef</var> contains a reference to the string being edited. It\n        can initially be set to a plain string scalar, in which case it will\n        be converted into a reference to that scalar.\n      </dd>\n      <dt>charsRef</dt>\n      <dd>Default: reference to internal \@UpperChars array</dd>\n      <dd>\n        <var>charsRef</var> contains a reference to the list of allowable characters.\n        It can be supplied as an array reference, or as the strings &quot;upper&quot;\n        or &quot;both&quot;, which are converted to references to the internal\n        \@UpperChars and \@BothChars arrays, respectively.\n      </dd>\n      <dt>numberLetterRef</dt>\n      <dd>Default: reference to internal \@numberLettersMixed array</dd>\n      <dd>\n        <var>numberLetterRef</var> contains a reference to the list of characters to use for number key entry.\n        It can be supplied as an array reference, or unsupplied for the default array.  It can also be supplied\n        as the string &quot;upper&quot; to refer to \@numberLettersUpper.\n      </dd>\n      <dt>doublesizeReplace</dt>\n      <dd>Default: none</dd>\n      <dd>\n        A reference to a hash of characters to replace in doublesize mode for\n        display. This would most likely be done for custom characters which\n        have no doublesize equivalents. The referenced hash has keys equal\n        to the character to replace, and values equal to the character to use\n        in doublesize mode. For example, to replace the custom character myCustom\n        with &quot;M&quot; when doublesized would be \n        <code>&#123;Slim::Display::Display::symbol(&quot;myCustom&quot;) =&gt; &quot;M&quot;&#125;</code>\n      </dd>\n      <dt>charIndex</dt>\n      <dd>Default: index of the current character within the charsRef array</dd>\n      <dd>\n        The index of the current character within the charsRef array. If\n        supplied, and if cursorPos ends up at the end of the valueRef string,\n        the character at this index will be appended to the end of valueRef,\n        otherwise, the rightarrow will be used. This parameter will not usually\n        need to be set on entry, but is used within the <strong>INPUT.Text</strong> mode.\n      </dd>\n      <dt>cursorPos</dt>\n      <dd>Default: end of initial string</dd>\n      <dd>\n        The current position of the cursor, which determines which character will\n        be modified. This parameter will not usually need to be set on entry, but\n        is used within the <strong>INPUT.Text</strong> mode.\n      </dd>\n      <dt>displayPos</dt>\n      <dd>\n        Default: either the beginning of the string, or such that the cursor\n        is at the rightmost position on the display.\n      </dd>\n      <dd>\n        The position within the string at which to begin the display in\n        single-height mode. If supplied when entering the mode it will be\n        ignored. This parameter will not usually need to be set on entry, but\n        is used within the <strong>INPUT.Text</strong> mode.\n      </dd>\n      <dt>displayPos2X</dt>\n      <dd>\n        Default: either the beginning of the string, or such that the cursor\n        is at the rightmost position on the display.\n      </dd>\n      <dd>\n        The position within the string at which to begin the display in\n        double-size mode. If supplied when entering the mode it will be ignored.\n        This parameter will not usually need to be set on entry, but\n        is used within the <strong>INPUT.Text</strong> mode.\n      </dd>\n      <dt>rightIndex</dt>\n      <dd>Default: index of rightarrow within the charsRef array</dd>\n      <dd>\n        If rightarrow is within the list of allowable characters, its index is\n        stored in the <var>rightIndex</var> parameter. Otherwise, the value of\n        <var>rightIndex</var> is set to -1. If supplied when entering the mode it\n        will be ignored. This parameter will not usually need to be set on entry,\n        but is used within the <strong>INPUT.Text</strong> mode.\n      </dd>\n      <dt>parentMode</dt>\n      <dd>Default: name of mode which called <strong>INPUT.Text</strong></dd>\n      <dd>\n        This parameter is used with the passback function to let a calling mode\n        set up its own button handling functions, which can then be mapped as\n        desired by the user. The default is actually the first non-INPUT mode up\n        the mode stack from the current location in order to prevent infinite\n        recursion.\n      </dd>\n    </dl>\n  </p>\n  <h5>Exit Event Types</h5>\n  <p>\n    The callback function should handle the following event types in some way.\n    Ignoring them is acceptable, crashing the server is not.\n  </p>\n  <p>\n    <dl>\n      <dt>backspace</dt>\n      <dd>\n        Generated when the backspace function is called when the cursor is at the\n        beginning of the string.\n      </dd>\n      <dt>cursor_left</dt>\n      <dd>\n        Generated when the cursor is requested to move left, and is already at the\n        beginning of the string.\n      </dd>\n      <dt>cursor_right</dt>\n      <dd>\n        Generated when the cursor is requested to move right, and is already at the\n        end of the string.\n      </dd>\n      <dt>delete</dt>\n      <dd>\n        Generated when the delete function is called on the last character in the\n        string, resulting in the empty string.\n      <dd>\n      <dt>nextChar</dt>\n      <dd>\n        Generated when the nextChar function is called and the current character\n        is the right arrow.\n      </dd>\n      <dt>scroll_left</dt>\n      <dd>\n        Generated when a scroll to the left is requested, but the beginning of the\n        string is already being displayed.\n      </dd>\n      <dt>scroll_right</dt>\n      <dd>\n        Generated when a scroll to the right is requested, but the last character\n        of the string is already being displayed in the leftmost column of the\n        display.\n      </dd>\n      <dt><em>Other</em></dt>\n      <dd>\n        Generated by the exit function where the type is determined by the\n        argument supplied. Usually will be a button name like play or add, but\n        be prepared for anything.\n      </dd>\n    </dl>\n  </p>\n  <h5>Functions</h5>\n  <p>\n    <dl>\n      <dt>up</dt>\n      <dd>\n        Changes the current character to the one preceding it in the character\n        list. Repeat is allowed and accelerates.\n      </dd>\n      <dt>down</dt>\n      <dd>\n        Changes the current character to the one following it in the character\n        list. Repeat is allowed and accelerates.\n      </dd>\n      <dt>backspace</dt>\n      <dd>\n        The current character is deleted and the cursor moved one place to the\n        left. If that movement would place the cursor before the first position\n        in the string, an exit event is generated with a type of <em>backspace</em>.\n        This function is not designed to be used with repeat.\n      </dd>\n      <dt>delete</dt>\n      <dd>\n        Similar to backspace, except the cursor is not moved. If the last character\n        remaining in the string is deleted, an exit event of type <em>delete</em>\n        is generated. This function is not designed to be used with repeat.\n      </dd>\n      <dt>nextchar</dt>\n      <dd>\n        The cursor is advanced to the next position. If the cursor was at the end\n        of the string and the rightarrow was not the current character, then an\n        additional character is added to the end of the string prior to moving\n        the cursor there. The added character will be the rightarrow character if\n        that character is in the list of allowable characters, otherwise the first\n        character in the list is used. If the cursor was at the end and the current\n        character was the rightarrow, then an exit event of type <em>nextchar</em>\n        is generated. This function is not designed to be used with repeat.\n      </dd>\n      <dt>cursor</dt>\n      <dd>\n        This function takes an argument to indicate the direction and distance\n        to move the cursor. Use <em>left</em> to move the cursor left and <em>right</em>\n        to move it right. The left or right may be followed by an underscore\n        and a number indicating the distance to move in that direction. If no\n        distance is specified, it defaults to a value of one. If the cursor was\n        originally at either end of the string and is requested to move off the\n        end, an exit event is generated with a type of either <em>cursor_left</em>\n        or <em>cursor_right</em>, depending on the requested direction. Repeat\n        is allowed, and takes place at a constant rate. The cursor stops when\n        it hits the end under repeat, but an exit event is not generated until\n        the button is released and pressed again.\n      </dd>\n      <dt>scroll</dt>\n      <dd>\n        This function takes an argument to indicate the direction and distance\n        to move the viewable area. Use <em>left</em> to move the viewable area\n        left and <em>right</em> to move it right. The left or right may be\n        followed by an underscore and a number indicating the distance to move\n        in that direction. If no distance is specified, it defaults to a value\n        of one. If the beginning of the viewable area was originally at either\n        end of the string and is requested to move off the end, an exit event\n        is generated with a type of either <em>scroll_left</em> or\n        <em>scroll_right</em>, depending on the requested direction. Repeat is\n        allowed, and takes place at a constant rate. The movement stops when it\n        hits the end under repeat, but an exit event is not generated until the\n        button is released and pressed again.\n      </dd>\n      <dt>insert</dt>\n      <dd>\n        Inserts a character at the current cursor location. The character to be\n        inserted can be supplied as an argument to the function, otherwise the\n        first non-rightarrow character in the character list is used. Any\n        supplied character must be in the allowed list of characters, otherwise\n        a space character is substituted. Since the design of the button mapping\n        mechanism does not allow for the use of the space character, the =\n        character, or the # character within arguments, alternate representations\n        are required. These can be specified as follows:\n        <ul>\n          <li>anything beginning with &quot;sp&quot; for the space character</li>\n          <li>anything beginning with &quot;eq&quot; for the = character</li>\n          <li>\n            any of &quot;hash&quot;, &quot;sharp&quot;, &quot;pound&quot;, or \n            a string beginning with &quot;num&quot for the # character\n          </li>\n        </ul>\n        This function is not designed to be used with repeat.\n      </dd>\n      <dt>clear</dt>\n      <dd>\n        Truncates the string and adds either the rightarrow or, if the rightarrow\n        is not in the list of characters, the first character in the list.\n        This function is not designed to be used with repeat.\n      </dd>\n      <dt>numberLetter</dt>\n      <dd>\n        This function takes an argument, which it then passes to\n        Slim::Buttons::Common::numberLetter.  The returned character is then\n        checked against the list of allowable characters, and replaced by a\n        space if not present. The cursor is advanced to the next character if\n        a different button is pressed than the previous, or after an amount of\n        time equal to the <var>displayTextTimeout</var> setting passes.\n        This function is not designed to be used with repeat.\n      </dd>\n      <dt>letter</dt>\n      <dd>\n        Takes an argument, which is then validated (checked against the list of\n        characters, with similar replacements as the <em>insert</em> function).\n        The current character is changed to the validated character, and the\n        cursor advanced. This function is not designed to be used with repeat.\n      </dd>\n      <dt>exit</dt>\n      <dd>\n        Takes an argument. An exit event is generated with the type being the\n        supplied argument. If no argument is supplied, the exit event type is\n        <em>exit</em>.\n      </dd>\n      <dt>passback</dt>\n      <dd>\n        Executes the last button event (button plus pressing style) in the\n        context of the parent mode (set by the parentMode parameter). This\n        allows for parent modes to map button presses to functions without\n        needing to modify the mapping of the <strong>INPUT.Text</strong> mode.\n        The mode is not actually changed by this function, so all mode\n        parameters are still available.\n      </dd>\n    </dl>\n  </p>\n  <h4><a id=\"List\"></a>List</h4>\n  <h5>Description</h5>\n  <p>\n    The <strong>List</strong> input mode is used to select one item from\n    a list of items.  The items in the list can have different representations\n    internally and externally.  An onChange handler can be provided for immediate\n    effects of changing position in the list.\n  </p>\n  <p>\n    On entry into the mode, the initial selection will depend on the supplied\n    parameters.  If <var>valueRef</var> is supplied, and the value it references\n    is contained in the list referenced by the supplied <var>listRef</var>, then\n    <var>listIndex</var> is updated to reflect the position of the supplied value,\n    if it does not already match. This is done through a sequential search of the\n    supplied <var>listRef</var>. If the list is of significant size and a faster\n    search method is available, it is recommended that the calling mode use that\n    method to supply the <var>listIndex</var> parameter.\n  </p>\n  <p>\n    If <var>valueRef</var> is not supplied, or if its value does not appear in\n    the list, it will be updated to be the value at position <var>listIndex</var>\n    (if supplied and in bounds, 0 if not supplied or out of bounds). If\n    <var>valueRef</var> is not being used to update a variable outside the input\n    mode, it is recommended to leave it undefined, and allow it to be initialized\n    by the input mode.\n  </p>\n  <p>\n    This mode will not maintain state between invocations, so if such state\n    information needs to be kept, it is the responsibility of the calling\n    mode to do so.\n  </p>\n  <h5>Parameters</h5>\n  <p>\n    The following parameters are used by the <strong>INPUT.List</strong> mode. They are\n    listed in the order of likelyhood to be supplied. Other parameters can be\n    supplied for use by the callback, external display, or change handler\n    functions, but will not otherwise have any effect on the <strong>INPUT.List</strong>\n    behavior.\n  </p>\n  <p>\n    The <var>header</var>, <var>externRef</var>, and <var>overlayRef</var>\n    parameters can be supplied in a number of different ways.  If a scalar, it\n    will be displayed as is. If a code reference, it will be invoked with the\n    arguments specified in the corresponding <var>Args</var> parameter\n    (<var>header</var> would use <var>headerArgs</var> etc.) and the return value\n    will be displayed. If a hash reference, the value corresponding to the key\n    indicated by the referenced value of <var>valueRef</var> will be displayed.\n    If an array ref, the value at <var>listIndex</var> of the array is extracted\n    and then interpreted as above. If the extracted value is itself an array ref,\n    the array referenced is returned (this would most likely be the case for\n    <var>overlayRef</var>, which expects an array final value).\n  </p>\n  <p>\n    <dl>\n      <dt>listRef</dt>\n      <dd>Default: none</dd>\n      <dd>\n        An array reference to the list of items. This parameter must be supplied\n        or the <strong>INPUT.List</strong> mode will not be entered. This list\n        should be the internal representations of the item values. If an array\n        ref is supplied for <var>externRef</var> but not <var>listRef</var>,\n        <var>listRef</var> will be set to the same reference as\n        <var>externRef</var>.\n      </dd>\n      <dt>callback</dt>\n      <dd>Default: none</dd>\n      <dd>\n        A code reference which is called whenever an exit event occurs. If\n        this parameter is not supplied, <strong>INPUT.List</strong> will \n        perform a pop mode right on left exit event, bump right on right exit\n        events, and a simple pop mode on other types of exit event. This\n        behavior should be sufficient for simple list displays where nothing\n        needs to happen on a right exit event. The procedure referenced should\n        take the client object as the first parameter and the exit event type\n        as the second.\n      </dd>\n      <dt>header</dt>\n      <dd>Default: &quot;Select item:&quot; (not localized)</dd>\n      <dd>\n        String to display on the top line of the display. This parameter can\n        be interpreted in a number of ways, see above. After the value to be\n        displayed is determined, it is then modified according to the\n        <var>stringHeader</var> and <var>headerAddCount</var> parameters, below.\n      </dd>\n      <dt>headerArgs</dt>\n      <dd>Default: &quot;CV&quot;</dd>\n      <dd>\n        One of &quot;CV&quot;, &quot;C&quot;, &quot;V&quot;, or &quot;&quot;.\n        The C indicates that the client object should be passed to the function\n        to determine the header value, the V indicates that the internal value\n        should be passed.\n      </dd>\n      <dt>stringHeader</dt>\n      <dd>Default: undef</dd>\n      <dd>\n        If set to a true value, the display value of <var>header</var> is\n        passed to the <code>string()</code> function to be localized. If no\n        localized string is defined for the value of <var>header</var>, it is\n        displayed as is.\n      </dd>\n      <dt>headerAddCount</dt>\n      <dd>Default: undef</dd>\n      <dd>\n        If set to a true value, a string like &quot; (X of Y)&quot; (where the\n        &quot;of&quot; is localized) is appended to the end of the header. The\n        <strong>X</strong> is the one-based index of the current item in the\n        list, and the <strong>Y</strong> is the total number of items in the\n        list. This addition takes place after the header is modified by\n        <var>stringHeader</var>.\n      <dt>externRef</dt>\n      <dd>Default: none</dd>\n      <dd>\n        The value to be displayed on the bottom line of the display, see above\n        for interpretation of this parameter. If this parameter is not supplied,\n        it will be set to the same reference as <var>listRef</var>. After the\n        value to be displayed is determined, it is then modified according to the\n        <var>stringExternRef</var> parameter below.\n      </dd>\n      <dt>externRefArgs</dt>\n      <dd>Default: &quot;CV&quot;</dd>\n      <dd>\n        One of &quot;CV&quot;, &quot;C&quot;, &quot;V&quot;, or &quot;&quot;.\n        The C indicates that the client object should be passed to the function\n        to determine the external value, the V indicates that the internal value\n        should be passed.\n      </dd>\n      <dt>stringExternRef</dt>\n      <dd>Default: undef</dd>\n      <dd>\n        If set to a true value, the display value of <var>externRef</var> is\n        passed to the <code>string()</code> function to be localized. If no\n        localized string is defined for the value of <var>externRef</var>, it\n        is displayed as is.\n      </dd>\n      <dt>valueRef</dt>\n      <dd>\n        Default: reference to copy of item in <var>listIndex</var> position in list\n      </dd>\n      <dd>\n        <var>valueRef</var> contains a reference to the currently selected item.\n        Typically this will be a reference to a variable local to the calling\n        mode, so that the final value will not need to be explicitly assigned\n        to some local variable.\n      </dd>\n      <dt>listIndex</dt>\n      <dd>Default: 0</dd>\n      <dd>\n        The (zero based) index of the currently selected item.\n      </dd>\n      <dt>overlayRef</dt>\n      <dd>Default: undef</dd>\n      <dd>\n        Strings to use as the overlay. See interpretation rules above.\n      </dd>\n      <dt>overlayRefArgs</dt>\n      <dd>Default: &quot;CV&quot;</dd>\n      <dd>\n        One of &quot;CV&quot;, &quot;C&quot;, &quot;V&quot;, or &quot;&quot;.\n        The C indicates that the client object should be passed to the function\n        to determine the overlay values, the V indicates that the internal value\n        should be passed.\n      </dd>\n      <dt>noWrap</dt>\n      <dd>Default: undef</dd>\n      <dd>\n        Determines whether or not to wrap around the ends of the list. If set\n        to a true value, attempts to scroll past either end of the list will\n        result in a bump up or down animation, depending on the requested\n        direction. When left unset, or set to a false value (the default), moving\n        up past the beginning of the list will take you to the end of the list,\n        and moving down beyond the end of the list will take you back to the\n        beginning. The ends are sticky, so the wraparound will not take place\n        while repeating.\n      </dd>\n      <dt>onChange</dt>\n      <dd>Default: none</dd>\n      <dd>\n        A code reference which is executed each time the currently selected\n        item changes. It is passed arguments according to the value of\n        <var>onChangeArgs</var>. Any return value will be ignored.\n      </dd>\n      <dt>onChangeArgs</dt>\n      <dd>Default: &quot;CV&quot;</dd>\n      <dd>\n        Some combination of the letters C, V, and I, or the empty string.\n        The C indicates that the client object should be passed to the function,\n        the V indicates that the internal value should be passed, and the I\n        indicates that the index of the current item should be passed. The\n        arguments will always come in the order C, then V, then I, skipping\n        arguments which do not appear.\n      </dd>\n      <dt>parentMode</dt>\n      <dd>Default: name of mode which called <strong>INPUT.List</strong></dd>\n      <dd>\n        This parameter is used with the passback function to let a calling mode\n        set up its own button handling functions, which can then be mapped as\n        desired by the user. The default is actually the first non-INPUT mode up\n        the mode stack from the current location in order to prevent infinite\n        recursion.\n      </dd>\n      <dt>isSorted</dt>\n      <dd>Default: undef</dd>\n      <dd>\n        Indicates whether the internal or external list is sorted for purposes\n        of the numberScroll function. <strong>I</strong> indicates that the\n        internal list is sorted and <strong>E</strong>, the external. A value\n        of <strong>L</strong> indicates that a lookup function, supplied in\n        <var>lookupRef</var> determined the sort order. Any other value, or no\n        supplied value, means that the list will be treated as unsorted.\n      </dd>\n      <dt>lookupRef</var>\n      <dd>Default: undef</dd>\n      <dd>\n        Lookup function reference, as used by Slim::Buttons::Common::numberScroll().\n        Takes an index and returns a value for that index.\n      </dd>\n    </dl>\n  </p>\n  <h5>Exit Event Types</h5>\n  <p>\n    The callback function should handle the following event types in some way.\n    Ignoring them is acceptable, crashing the server is not.\n  </p>\n  <p>\n    <dl>\n      <dt>left</dt>\n      <dd>\n        By default, generated by a left button press. If no callback function\n        specified, this will result in leaving the mode with the animated\n        push to the right.\n      </dd>\n      <dt>right</dt>\n      <dd>\n        By default, generated by a right button press. If no callback function\n        specified, this will result in a bump right animation.\n      </dd>\n      <dt><em>Other</em></dt>\n      <dd>\n        Generated by the exit function where the type is determined by the\n        argument supplied. Usually will be a button name like play or add, but\n        be prepared for anything.\n      </dd>\n    </dl>\n  </p>\n  <h5>Functions</h5>\n  <p>\n    <dl>\n      <dt>up</dt>\n      <dd>Changes the current position in the list. Repeat is allowed and accelerates.</dd>\n      <dt>down</dt>\n      <dd>Changes the current position in the list. Repeat is allowed and accelerates.</dd>\n      <dt>exit</dt>\n      <dd>\n        Takes an argument. An exit event is generated with the type being the\n        supplied argument. If no argument is supplied, the exit event type is\n        <em>exit</em>.\n      </dd>\n      <dt>passback</dt>\n      <dd>\n        Executes the last button event (button plus pressing style) in the\n        context of the parent mode (set by the parentMode parameter). This\n        allows for parent modes to map button presses to functions without\n        needing to modify the mapping of the <strong>INPUT.List</strong> mode.\n        The mode is not actually changed by this function, so all mode\n        parameters are still available.\n      </dd>\n    </dl>\n  </p>\n  <h4><a id=\"Tree\"></a>Tree</h4>\n  <h5>Description</h5>\n  <p>Not currently implemented.</p>\n  <h4><a id=\"Time\"></a>Time</h4>\n  <h5>Description</h5>\n  <p>\n    The <strong>Time</strong> input mode is used to enter time values.\n    It restricts values to the allowable timeFormat as specified by the server\n    settings. Entry of digits is automatically allocated to valid columns.\n  </p>\n  <h5>Parameters</h5>\n  <p>\n    The following parameters are used by the <strong>INPUT.Time</strong> mode. They are listed\n    in the order of likelyhood to be supplied. Other parameters can be supplied\n    for use by the callback function, but will not otherwise have any effect\n    on the <strong>INPUT.Time</strong> behavior.\n  </p>\n  <p>\n    <dl>\n      <dt>callback</dt>\n      <dd>Default: none</dd>\n      <dd>\n        A code reference which is called whenever an exit event occurs. This\n        parameter should always be supplied by the calling mode, otherwise\n        <strong>INPUT.Time</strong> will simply perform a pop mode on an exit event, potentially\n        losing any input. The procedure referenced should take the client object\n        as the first parameter and the exit event type as the second.\n      </dd>\n      <dt>header</dt>\n      <dd>Default: &quot;Enter Time:&quot; (not localized)</dd>\n      <dd>\n        String to display on the top line of the display. This string is displayed\n        as supplied, so be sure to localize any strings used.\n      </dd>\n      <dt>valueRef</dt>\n      <dd>Default: 0</dd>\n      <dd>\n        <var>valueRef</var> contains a reference to the string being edited. It\n        can initially be set to a plain string scalar, in which case it will\n        be converted into a reference to that scalar.\n      </dd>\n      <dt>onChange</dt>\n      <dd>Default: none</dd>\n      <dd>\n        A code reference which is executed each time the currently selected\n        item changes. It is passed arguments according to the value of\n        <var>onChangeArgs</var>. Any return value will be ignored.\n      </dd>\n      <dt>onChangeArgs</dt>\n      <dd>Default: &quot;CV&quot;</dd>\n      <dd>\n        One of &quot;CV&quot;, &quot;C&quot;, &quot;V&quot;, or &quot;&quot;.\n        The C indicates that the client object should be passed to the function,\n        the V indicates that the internal value should be passed.\n      </dd>\n      <dt>cursorPos</dt>\n      <dd>Default: beginning of time string</dd>\n      <dd>\n        The current position of the cursor, which determines which character will\n        be modified. This parameter will not usually need to be set on entry, but\n        is used within the <strong>INPUT.Time</strong> mode.\n      </dd>\n      <dt>parentMode</dt>\n      <dd>Default: name of mode which called <strong>INPUT.Time</strong></dd>\n      <dd>\n        This parameter is used with the passback function to let a calling mode\n        set up its own button handling functions, which can then be mapped as\n        desired by the user. The default is actually the first non-INPUT mode up\n        the mode stack from the current location in order to prevent infinite\n        recursion.\n      </dd>\n    </dl>\n  </p>\n  <h5>Exit Event Types</h5>\n  <p>\n    The callback function should handle the following event types in some way.\n    Ignoring them is acceptable, crashing the server is not.\n  </p>\n  <p>\n    <dl>\n      <dt>play</dt>\n      <dd>\n        By default, generated when the play button is pressed.\n      </dd>\n      <dt>add</dt>\n      <dd>\n        By default, generated when the add button is pressed.\n      </dd>\n      <dt>search</dt>\n      <dd>\n        By default, generated when the search button is pressed.\n      </dd>\n      <dt>left</dt>\n      <dd>\n        Generated when the cursor is moved left from the leftmost position.\n      </dd>\n      <dt>right</dt>\n      <dd>\n        Generated when the cursor is moved right from the rightmost position.\n      </dd>\n      <dt><em>Other</em></dt>\n      <dd>\n        Generated by the exit function where the type is determined by the\n        argument supplied. Usually will be a button name like play or add, but\n        be prepared for anything.\n      </dd>\n    </dl>\n  </p>\n  <h5>Functions</h5>\n  <p>\n    <dl>\n      <dt>up</dt>\n      <dd>\n        Changes the current digit one higher in value. Repeat is allowed and accelerates. \n        Rolling over will increment values to the left.\n      </dd>\n      <dt>down</dt>\n      <dd>\n       Changes the current digit one lower in value. Repeat is allowed and accelerates. \n       Rolling over will decrement values to the left.\n      </dd>\n      <dt>left</dt>\n      <dd>\n        The the cursor moved one place to the left. If that movement would place the cursor\n        before the first position in the string, an exit event is generated with a type \n        of <em>left</em>. This function is not designed to be used with repeat.\n      </dd>\n      <dt>right</dt>\n      <dd>\n        The cursor is advanced to the next position. If the cursor was at the end, \n        then an exit event of type <em>right</em> is generated. This function is \n        not designed to be used with repeat.\n      </dd>\n      <dt>cursor</dt>\n      <dd>\n        This function takes an argument to indicate the direction and distance\n        to move the cursor. Use <em>left</em> to move the cursor left and <em>right</em>\n        to move it right. The left or right may be followed by an underscore\n        and a number indicating the distance to move in that direction. If no\n        distance is specified, it defaults to a value of one. If the cursor was\n        originally at either end of the string and is requested to move off the\n        end, an exit event is generated with a type of either <em>left</em>\n        or <em>right</em>, depending on the requested direction. Repeat\n        is allowed, and takes place at a constant rate. The cursor stops when\n        it hits the end under repeat, but an exit event is not generated until\n        the button is released and pressed again.\n      </dd>\n      <dt>numberLetter</dt>\n      <dd>\n        This function enters a digit directly in the string. The cursor is \n        advanced to the next character if a different button is pressed than \n        the previous, or after an amount of time equal to the <var>displayTextTimeout</var> \n        setting passes.  This function is not designed to be used with repeat.\n      </dd>\n      <dt>exit</dt>\n      <dd>\n        Takes an argument. An exit event is generated with the type being the\n        supplied argument. If no argument is supplied, the exit event type is\n        <em>exit</em>.\n      </dd>\n      <dt>passback</dt>\n      <dd>\n        Executes the last button event (button plus pressing style) in the\n        context of the parent mode (set by the parentMode parameter). This\n        allows for parent modes to map button presses to functions without\n        needing to modify the mapping of the <strong>INPUT.Time</strong> mode.\n        The mode is not actually changed by this function, so all mode\n        parameters are still available.\n      </dd>\n    </dl>\n  </p>\n  <h4><a id=\"Bar\"></a>Bar</h4>\n  <h5>Description</h5>\n  <p>\n    The <strong>Bar</strong> input mode is used to select a value that is best represented as\n    on a sliding scale.  This may be a single direction or bi-directional slider.\n  </p>\n  <p>\n    On entry into the mode, the initial selection will depend on the supplied\n    parameters.  If <var>valueRef</var> is supplied, then the mode will begin with that value.\n    If <var>valueRef</var> is not supplied, or if its value does not appear in\n    fit withing the bounds supplied in the other parameters, the value will be assumed to be zero.\n  <p>\n    This mode will not maintain state between invocations, so if such state\n    information needs to be kept, it is the responsibility of the calling\n    mode to do so.\n  </p>\n  <h5>Parameters</h5>\n  <p>\n    The following parameters are used by the <strong>INPUT.Bar</strong> mode. They are\n    listed in the order of likelyhood to be supplied. Other parameters can be\n    supplied for use by the callback, external display, or change handler\n    functions, but will not otherwise have any effect on the <strong>INPUT.Bar</strong>\n    behavior.\n  </p>\n  <p>\n    The <var>header</var> parameter can be supplied in a number of different ways.  If a scalar, it\n    will be displayed as is. If a code reference, it will be invoked with the\n    arguments specified in the corresponding <var>Args</var> parameter\n    (<var>header</var> would use <var>headerArgs</var> etc.) and the return value\n    will be displayed. If a hash reference, the value corresponding to the key\n    indicated by the referenced value of <var>valueRef</var> will be displayed.\n    If an array ref, the value at <var>listIndex</var> of the array is extracted\n    and then interpreted as above. If the extracted value is itself an array ref,\n    the array referenced is returned.\n  </p>\n  <p>\n    <dl>\n      <dt>header</dt>\n      <dd>Default: &quot;Select item:&quot; (not localized)</dd>\n      <dd>\n        String to display on the top line of the display. This parameter can\n        be interpreted in a number of ways, see above. After the value to be\n        displayed is determined, it is then modified according to the\n        <var>stringHeader</var> and <var>headerAddCount</var> parameters, below.\n      </dd>\n      <dt>headerArgs</dt>\n      <dd>Default: &quot;CV&quot;</dd>\n      <dd>\n        One of &quot;CV&quot;, &quot;C&quot;, &quot;V&quot;, or &quot;&quot;.\n        The C indicates that the client object should be passed to the function\n        to determine the header value, the V indicates that the internal value\n        should be passed.\n      </dd>\n      <dt>stringHeader</dt>\n      <dd>Default: undef</dd>\n      <dd>\n        If set to a true value, the display value of <var>header</var> is\n        passed to the <code>string()</code> function to be localized. If no\n        localized string is defined for the value of <var>header</var>, it is\n        displayed as is.\n      </dd>\n      <dt>callback</dt>\n      <dd>Default: none</dd>\n      <dd>\n        A code reference which is called whenever an exit event occurs. If\n        this parameter is not supplied, <strong>INPUT.Bar</strong> will \n        perform a pop mode right on left exit event, bump right on right exit\n        events, and a simple pop mode on other types of exit event. This\n        behavior should be sufficient for simple list displays where nothing\n        needs to happen on a right exit event. The procedure referenced should\n        take the client object as the first parameter and the exit event type\n        as the second.\n      </dd>\n      <dt>handleLeaveMode</dt>\n      <dd>Default: undef</dd>\n      <dd>\n      	If set and true then the exit callback handler function will be invoked\n      	whenever the mode is left. This is most useful if the mode wants to exit\n      	if another mode is pushed. \n      </dd>\n      <dt>valueRef</dt>\n      <dd>\n        Default: reference to copy of item in <var>listIndex</var> position in list\n      </dd>\n      <dd>\n        <var>valueRef</var> contains a reference to the currently selected item.\n        Typically this will be a reference to a variable local to the calling\n        mode, so that the final value will not need to be explicitly assigned\n        to some local variable.\n      </dd>\n      <dt>trackValueChanges</dt>\n      <dd>Default: undef</dd>\n      <dd>\n        Allow the value referenced by valueRef to be modified externally and to\n        track such changes before applying up/down changes.\n      </dd>\n      <dt>min</dt>\n      <dd>Default: 0</dd>\n      <dd>\n        Sets the minimum value allowed for selection.  The slider will stop and hold \n        at this value unless the user selects a greater value.\n      </dd>\n      <dt>max</dt>\n      <dd>Default: 100</dd>\n      <dd>\n        Sets the maximum value allowed for selection.  The slider will stop and hold \n        at this value unless the user selects a lesser value.\n      </dd>\n      <dt>mid</dt>\n      <dd>Default: 0</dd>\n      <dd>\n        Sets the midpoint reference for bi-directional sliders.  Accellerated scrolling \n        will pause at this point, and the bar will display mirrored output centred on this point.\n      </dd>\n      <dt>cursor</dt>\n      <dd>Default: undef</dd>\n      <dd>\n        Places a visible cursor at the specified position.\n      </dd>\n      <dt>increment</dt>\n      <dd>Default: 2.5</dd>\n      <dd>\n        Determines the value increase for each step in the scrolling function.\n      </dd>\n      <dt>barOnDouble</dt>\n      <dd>Default: 0</dd>\n      <dd>\n        Determines the display when large fonts are used.  Setting to 1 will show only the Bar on large fonts.\n        The default of 0 shows the header line provided by the <var>header</var> parameter.\n      </dd>\n      <dt>onChange</dt>\n      <dd>Default: none</dd>\n      <dd>\n        A code reference which is executed each time the currently selected\n        item changes. It is passed arguments according to the value of\n        <var>onChangeArgs</var>. Any return value will be ignored.\n      </dd>\n      <dt>onChangeArgs</dt>\n      <dd>Default: &quot;CV&quot;</dd>\n      <dd>\n        One of &quot;CV&quot;, &quot;C&quot;, &quot;V&quot;, or &quot;&quot;.\n        The C indicates that the client object should be passed to the function,\n        the V indicates that the internal value should be passed.\n      </dd>\n    </dl>\n  </p>\n  <h5>Exit Event Types</h5>\n  <p>\n    The callback function should handle the following event types in some way.\n    Ignoring them is acceptable, crashing the server is not.\n  </p>\n  <p>\n    <dl>\n      <dt>left</dt>\n      <dd>\n        By default, generated by a left button press. If no callback function\n        specified, this will result in leaving the mode with the animated\n        push to the right.\n      </dd>\n      <dt>right</dt>\n      <dd>\n        By default, generated by a right button press. If no callback function\n        specified, this will result in a bump right animation.\n      </dd>\n      <dt><em>Other</em></dt>\n      <dd>\n        Generated by the exit function where the type is determined by the\n        argument supplied. Usually will be a button name like play or add, but\n        be prepared for anything.\n      </dd>\n    </dl>\n  </p>\n  <h5>Functions</h5>\n  <p>\n    <dl>\n      <dt>up</dt>\n      <dd>Changes the current position in the list. Repeat is allowed and accelerates.\n      If the bar is bi-directional, there will be a pause at the middle value</dd>\n      <dt>down</dt>\n      <dd>Changes the current position in the list. Repeat is allowed and accelerates.\n      If the bar is bi-directional, there will be a pause at the middle value</dd>\n      <dt>exit</dt>\n      <dd>\n        Takes an argument. An exit event is generated with the type being the\n        supplied argument. If no argument is supplied, the exit event type is\n        <em>exit</em>.\n      </dd>\n      <dt>passback</dt>\n      <dd>\n        Executes the last button event (button plus pressing style) in the\n        context of the parent mode (set by the parentMode parameter). This\n        allows for parent modes to map button presses to functions without\n        needing to modify the mapping of the <strong>INPUT.Bar</strong> mode.\n        The mode is not actually changed by this function, so all mode\n        parameters are still available.\n      </dd>\n    </dl>\n  </p>\n";
#line 1038 "/usr/share/squeezeboxserver/HTML/EN/html/docs/input.html"
    $output .=  $context->process('helpfooter.html');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
