#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1249312473',
        'name' => 'artistsAsHTML.html',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 1 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  ' '  . $stash->get('stringBY')  . ' ';
#line 22 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('null')
                  || $context->throw($context->error);
    
    $output .=  "\n";
#line 3 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $stash->set('contributorsHTML', [ ]);
    $output .=  "\n\n";
#line 5 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $stash->set('contributors', $stash->get(['item', 0, 'artistsWithAttributes', 0]) || $stash->get(['itemobj', 0, 'artistsWithAttributes', 0]));
    $output .=  "\n\n";
#line 21 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('contributors');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'contributorTuple'} = $_tt_value;
    $output .=  "\n	";
#line 8 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    if ($stash->get('maxContributors') && $stash->get(['loop', 0, 'count', 0]) > $stash->get('maxContributors')) {
#line 8 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  $stash->get(['contributorsHTML', 0, 'push', [ '...' ]]);
#line 8 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    last LOOP;
    }
    
    $output .=  "\n\n	";
#line 13 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $stash->set('target', $stash->get('notarget') ? '' : 'target="browser"');
    $output .=  "\n	";
#line 14 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    
    # CAPTURE
    $stash->set('contrib', do {
        my $output = '';
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['contributorTuple', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
    $output .=  "\n	\n	";
#line 0 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    if ($stash->get('artwork') || $stash->get('artwork') eq 0) {
#line 0 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $stash->set('artparam', ("&amp;artwork=" . $stash->get('artwork')));
    }
    
    $output .=  "\n	";
#line 17 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    
    # CAPTURE
    $stash->set('contributorHTMLFrag', do {
        my $output = '';
    $output .=  "<a href=\"";
#line 17 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  $stash->get('webroot');
    $output .=  "clixmlbrowser/clicmd=browselibrary+items&amp;mode=albums&amp;linktitle=";
#line 17 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  $stash->get('stringARTIST');
    $output .=  "%20(";
#line 17 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('uri')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['contributorTuple', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ")&amp;artist_id=";
#line 17 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  $stash->get(['contributorTuple', 0, 'artistId', 0]);
    $output .=  "&amp;";
#line 17 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  $stash->get('artparam');
    $output .=  "&amp;player=";
#line 17 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  $stash->get('playerURI');
    $output .=  "/\" ";
#line 17 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  $stash->get('target');
    $output .=  " class=\"browseItemLink\"><span style=\"display:inline\">";
#line 17 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  $stash->get('contrib');
    $output .=  "</span></a>";
        $output;
    });
    
    $output .=  "\n\n	";
#line 19 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  $stash->get(['contributorsHTML', 0, 'push', [ $stash->get('contributorHTMLFrag') ]]);
    $output .=  "\n\n";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
        
        &$_tt_filter($output);
    };
    
#line 23 "/usr/share/squeezeboxserver/HTML/EN/artistsAsHTML.html"
    $output .=  $stash->get(['contributorsHTML', 0, 'join', [ ', ' ]]);
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
